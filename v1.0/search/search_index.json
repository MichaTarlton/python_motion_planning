{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Motion Planning Documentation","text":""},{"location":"#curve_generation","title":"Curve_generation","text":""},{"location":"#bezier_curve","title":"Bezier_curve","text":"<ul> <li>Bezier</li> </ul>"},{"location":"#bspline_curve","title":"Bspline_curve","text":"<ul> <li>BSpline</li> </ul>"},{"location":"#cubic_spline","title":"Cubic_spline","text":"<ul> <li>CubicSpline</li> </ul>"},{"location":"#curve","title":"Curve","text":"<ul> <li>Curve</li> </ul>"},{"location":"#dubins_curve","title":"Dubins_curve","text":"<ul> <li>Dubins</li> </ul>"},{"location":"#fem_pos_smooth","title":"Fem_pos_smooth","text":"<ul> <li>FemPosSmoother</li> </ul>"},{"location":"#polynomial_curve","title":"Polynomial_curve","text":"<ul> <li>Polynomial</li> </ul>"},{"location":"#reeds_shepp","title":"Reeds_shepp","text":"<ul> <li>ReedsShepp</li> </ul>"},{"location":"#global_planner","title":"Global_planner","text":""},{"location":"#evolutionary_search","title":"Evolutionary_search","text":""},{"location":"#aco","title":"Aco","text":"<ul> <li>ACO</li> </ul>"},{"location":"#evolutionary_search_1","title":"Evolutionary_search","text":"<ul> <li>EvolutionarySearcher</li> </ul>"},{"location":"#pso","title":"Pso","text":"<ul> <li>PSO</li> </ul>"},{"location":"#graph_search","title":"Graph_search","text":""},{"location":"#a_star","title":"A_star","text":"<ul> <li>AStar</li> </ul>"},{"location":"#d_star","title":"D_star","text":"<ul> <li>DNode</li> <li>DStar</li> </ul>"},{"location":"#d_star_lite","title":"D_star_lite","text":"<ul> <li>DStarLite</li> </ul>"},{"location":"#dijkstra","title":"Dijkstra","text":"<ul> <li>Dijkstra</li> </ul>"},{"location":"#gbfs","title":"Gbfs","text":"<ul> <li>GBFS</li> </ul>"},{"location":"#graph_search_1","title":"Graph_search","text":"<ul> <li>GraphSearcher</li> </ul>"},{"location":"#jps","title":"Jps","text":"<ul> <li>JPS</li> </ul>"},{"location":"#lazy_theta_star","title":"Lazy_theta_star","text":"<ul> <li>LazyThetaStar</li> </ul>"},{"location":"#lpa_star","title":"Lpa_star","text":"<ul> <li>LNode</li> <li>LPAStar</li> </ul>"},{"location":"#s_theta_star","title":"S_theta_star","text":"<ul> <li>SThetaStar</li> </ul>"},{"location":"#theta_star","title":"Theta_star","text":"<ul> <li>ThetaStar</li> </ul>"},{"location":"#voronoi","title":"Voronoi","text":"<ul> <li>VoronoiPlanner</li> </ul>"},{"location":"#sample_search","title":"Sample_search","text":""},{"location":"#informed_rrt","title":"Informed_rrt","text":"<ul> <li>Ellipse</li> <li>InformedRRT</li> </ul>"},{"location":"#rrt","title":"Rrt","text":"<ul> <li>RRT</li> </ul>"},{"location":"#rrt_connect","title":"Rrt_connect","text":"<ul> <li>RRTConnect</li> </ul>"},{"location":"#rrt_star","title":"Rrt_star","text":"<ul> <li>RRTStar</li> </ul>"},{"location":"#sample_search_1","title":"Sample_search","text":"<ul> <li>SampleSearcher</li> </ul>"},{"location":"#local_planner","title":"Local_planner","text":""},{"location":"#apf","title":"Apf","text":"<ul> <li>APF</li> </ul>"},{"location":"#ddpg","title":"Ddpg","text":"<ul> <li>Actor</li> <li>Critic</li> <li>DDPG</li> <li>ReplayBuffer</li> </ul>"},{"location":"#dqn","title":"Dqn","text":"<ul> <li>BasicBuffer</li> <li>DQN</li> <li>DQNPlanner</li> <li>PrioritizedBuffer</li> <li>SumTree</li> </ul>"},{"location":"#dwa","title":"Dwa","text":"<ul> <li>DWA</li> </ul>"},{"location":"#local_planner_1","title":"Local_planner","text":"<ul> <li>LocalPlanner</li> </ul>"},{"location":"#lqr","title":"Lqr","text":"<ul> <li>LQR</li> </ul>"},{"location":"#mpc","title":"Mpc","text":"<ul> <li>MPC</li> </ul>"},{"location":"#pid","title":"Pid","text":"<ul> <li>PID</li> </ul>"},{"location":"#rpp","title":"Rpp","text":"<ul> <li>RPP</li> </ul>"},{"location":"#utils","title":"Utils","text":""},{"location":"#agent","title":"Agent","text":""},{"location":"#agent_1","title":"Agent","text":"<ul> <li>Agent</li> <li>Robot</li> </ul>"},{"location":"#environment","title":"Environment","text":""},{"location":"#env","title":"Env","text":"<ul> <li>Env</li> <li>Grid</li> <li>Map</li> </ul>"},{"location":"#node","title":"Node","text":"<ul> <li>Node</li> </ul>"},{"location":"#point2d","title":"Point2d","text":"<ul> <li>Point2D</li> </ul>"},{"location":"#pose2d","title":"Pose2d","text":"<ul> <li>Pose2D</li> </ul>"},{"location":"#helper","title":"Helper","text":""},{"location":"#math_helper","title":"Math_helper","text":"<ul> <li>MathHelper</li> </ul>"},{"location":"#planner","title":"Planner","text":""},{"location":"#control_factory","title":"Control_factory","text":"<ul> <li>ControlFactory</li> </ul>"},{"location":"#curve_factory","title":"Curve_factory","text":"<ul> <li>CurveFactory</li> </ul>"},{"location":"#planner_1","title":"Planner","text":"<ul> <li>Planner</li> </ul>"},{"location":"#search_factory","title":"Search_factory","text":"<ul> <li>SearchFactory</li> </ul>"},{"location":"#plot","title":"Plot","text":""},{"location":"#plot_1","title":"Plot","text":"<ul> <li>Plot</li> </ul>"},{"location":"curve_generation/bezier_curve/Bezier/","title":"Bezier","text":""},{"location":"curve_generation/bezier_curve/Bezier/#python_motion_planning.curve_generation.bezier_curve.Bezier","title":"<code>python_motion_planning.curve_generation.bezier_curve.Bezier</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for Bezier curve generation.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required <code>offset</code> <code>float</code> <p>The offset of control points</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import Bezier\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = Bezier(step, offset)\n&gt;&gt;&gt; generator.run(points)\n</code></pre>"},{"location":"curve_generation/bezier_curve/Bezier/#python_motion_planning.curve_generation.bezier_curve.Bezier.bezier","title":"<code>bezier(t, control_points)</code>","text":"<p>Calculate the Bezier curve point.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>scale factor</p> required <code>control_points</code> <code>list[tuple]</code> <p>control points</p> required <p>Returns:</p> Name Type Description <code>point</code> <code>array</code> <p>point in Bezier curve with t</p>"},{"location":"curve_generation/bezier_curve/Bezier/#python_motion_planning.curve_generation.bezier_curve.Bezier.generation","title":"<code>generation(start_pose, goal_pose)</code>","text":"<p>Generate the Bezier Curve.</p> <p>Parameters:</p> Name Type Description Default <code>start_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <code>goal_pose</code> <code>tuple</code> <p>Target pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>x_list</code> <code>list</code> <p>x of the trajectory</p> <code>y_list</code> <code>list</code> <p>y of the trajectory</p> <code>yaw_list</code> <code>list</code> <p>yaw of the trajectory</p>"},{"location":"curve_generation/bezier_curve/Bezier/#python_motion_planning.curve_generation.bezier_curve.Bezier.getControlPoints","title":"<code>getControlPoints(start_pose, goal_pose)</code>","text":"<p>Calculate control points heuristically.</p> <p>Parameters:</p> Name Type Description Default <code>start_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <code>goal_pose</code> <code>tuple</code> <p>Target pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>control_points</code> <code>list[tuple]</code> <p>Control points</p>"},{"location":"curve_generation/bezier_curve/Bezier/#python_motion_planning.curve_generation.bezier_curve.Bezier.run","title":"<code>run(points)</code>","text":"<p>Running both generation and animation.</p> Text Only<pre><code>    Parameters:\n            points (list[tuple]): path points\n</code></pre>"},{"location":"curve_generation/bspline_curve/BSpline/","title":"BSpline","text":""},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline","title":"<code>python_motion_planning.curve_generation.bspline_curve.BSpline</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for B-Spline curve generation.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required <code>k</code> <code>int</code> <p>Degree of curve</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import BSpline\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = BSpline(step, k)\n&gt;&gt;&gt; generator.run(points)\n</code></pre>"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.approximation","title":"<code>approximation(points, param, knot)</code>","text":"<p>Given a set of N data points, D0, D1, ..., Dn, a degree k, and a number H, where N &gt; H &gt; k &gt;= 1, find a B-spline curve of degree k defined by H control points that satisfies the following conditions:     1. this curve contains the first and last data points;     2. this curve approximates the data polygon in the sense     of least square</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required <code>param</code> <code>list[float]</code> <p>The parameters of given points</p> required <code>knot</code> <code>list[float]</code> <p>The knot vector</p> <p>Returns:     control_points (np.ndarray): The control points</p> required"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.baseFunction","title":"<code>baseFunction(i, k, t, knot)</code>","text":"<p>Calculate base function using Cox-deBoor function.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>The index of base function</p> required <code>k</code> <code>int</code> <p>The degree of curve</p> required <code>t</code> <code>float</code> <p>parameter</p> required <code>knot</code> <code>list[float]</code> <p>knot vector</p> required <p>Returns:</p> Name Type Description <code>Nik_t</code> <code>float</code> <p>The value of base function Nik(t)</p>"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.generation","title":"<code>generation(t, k, knot, control_pts)</code>","text":"<p>Generate the B-spline curve.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>ndarray</code> <p>The parameter values</p> required <code>k</code> <code>int</code> <p>The degree of the B-spline curve</p> required <code>knot</code> <code>list[float]</code> <p>The knot vector</p> required <code>control_pts</code> <code>ndarray</code> <p>The control points</p> required <p>Returns:</p> Name Type Description <code>curve</code> <code>ndarray</code> <p>The B-spline curve</p>"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.interpolation","title":"<code>interpolation(points, param, knot)</code>","text":"<p>Given a set of N data points, D0, D1, ..., Dn and a degree k, find a B-spline curve of degree k defined by N control points that passes all data points in the given order.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required <code>param</code> <code>list[float]</code> <p>The parameters of given points</p> required <code>knot</code> <code>list[float]</code> <p>The knot vector</p> required <p>Returns:</p> Name Type Description <code>control_points</code> <code>ndarray</code> <p>The control points</p>"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.knotGeneration","title":"<code>knotGeneration(param, n)</code>","text":"<p>Generate knot vector.</p> <p>Parameters:</p> Name Type Description Default <code>param</code> <code>list[float]</code> <p>The parameters of given points</p> required <code>n</code> <code>int</code> <p>The number of data points</p> <p>Returns:     knot (list[float]): The knot vector</p> required"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.paramSelection","title":"<code>paramSelection(points)</code>","text":"<p>Calculate parameters using the <code>uniform spaced</code> or <code>chrod length</code> or <code>centripetal</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> <p>Returns:     Parameters (list[float]): The parameters of given points</p> required"},{"location":"curve_generation/bspline_curve/BSpline/#python_motion_planning.curve_generation.bspline_curve.BSpline.run","title":"<code>run(points, display=True)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required"},{"location":"curve_generation/cubic_spline/CubicSpline/","title":"CubicSpline","text":""},{"location":"curve_generation/cubic_spline/CubicSpline/#python_motion_planning.curve_generation.cubic_spline.CubicSpline","title":"<code>python_motion_planning.curve_generation.cubic_spline.CubicSpline</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for cubic spline generation.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import CubicSpline\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = CubicSpline(step)\n&gt;&gt;&gt; generator.run(points)\n</code></pre>"},{"location":"curve_generation/cubic_spline/CubicSpline/#python_motion_planning.curve_generation.cubic_spline.CubicSpline.run","title":"<code>run(points)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required"},{"location":"curve_generation/cubic_spline/CubicSpline/#python_motion_planning.curve_generation.cubic_spline.CubicSpline.spline","title":"<code>spline(x_list, y_list, t)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>x_list</code> <code>list[tuple]</code> <p>path points x-direction</p> required <code>y_list</code> <code>list[tuple]</code> <p>path points y-direction</p> required <code>t</code> <code>list</code> <p>parameter</p> required <p>Returns:</p> Name Type Description <code>p</code> <code>list</code> <p>The (x, y) of curve with given t</p> <code>dp</code> <code>list</code> <p>The derivative (dx, dy) of curve with given t</p>"},{"location":"curve_generation/curve/Curve/","title":"Curve","text":""},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve","title":"<code>python_motion_planning.curve_generation.curve.Curve</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.__init__","title":"<code>__init__(step)</code>","text":"<p>Base class for curve generation.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.generation","title":"<code>generation(start_pose, goal_pose)</code>  <code>abstractmethod</code>","text":"<p>Generate the curve.</p>"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.length","title":"<code>length(path)</code>","text":"<p>Calculate path or trajectory length with <code>path</code> format [(ix, iy)] (i from 0 to N)</p>"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.mod2pi","title":"<code>mod2pi(theta)</code>","text":"<p>Perform modulus operation on 2\u03c0.</p>"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.pi2pi","title":"<code>pi2pi(theta)</code>","text":"<p>Truncate the angle to the interval of -\u03c0 to \u03c0.</p>"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.run","title":"<code>run(points)</code>  <code>abstractmethod</code>","text":"<p>Running both generation and animation.</p>"},{"location":"curve_generation/curve/Curve/#python_motion_planning.curve_generation.curve.Curve.trigonometric","title":"<code>trigonometric(alpha, beta)</code>","text":"<p>Calculate some useful trigonometric value with angles.</p>"},{"location":"curve_generation/dubins_curve/Dubins/","title":"Dubins","text":""},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins","title":"<code>python_motion_planning.curve_generation.dubins_curve.Dubins</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for Dubins curve generation.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required <code>max_curv</code> <code>float</code> <p>The maximum curvature of the curve</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import Dubins\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = Dubins(step, max_curv)\n&gt;&gt;&gt; generator.run(points)\n</code></pre> References <p>[1] On curves of minimal length with a constraint on average curvature, and with prescribed initial and terminal positions and tangents</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.LRL","title":"<code>LRL(alpha, beta, dist)</code>","text":"<p>Left-Right-Left generation mode.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Initial pose of (0, 0, alpha)</p> required <code>beta</code> <code>float</code> <p>Goal pose of (dist, 0, beta)</p> required <code>dist</code> <code>float</code> <p>The distance between the initial and goal pose</p> required <p>Returns:</p> Name Type Description <code>t</code> <code>float</code> <p>Moving lenght of segments</p> <code>p</code> <code>float</code> <p>Moving lenght of segments</p> <code>q</code> <code>float</code> <p>Moving lenght of segments</p> <code>mode</code> <code>list</code> <p>Motion mode</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.LSL","title":"<code>LSL(alpha, beta, dist)</code>","text":"<p>Left-Straight-Left generation mode.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Initial pose of (0, 0, alpha)</p> required <code>beta</code> <code>float</code> <p>Goal pose of (dist, 0, beta)</p> required <code>dist</code> <code>float</code> <p>The distance between the initial and goal pose</p> required <p>Returns:</p> Name Type Description <code>t</code> <code>float</code> <p>Moving lenght of segments</p> <code>p</code> <code>float</code> <p>Moving lenght of segments</p> <code>q</code> <code>float</code> <p>Moving lenght of segments</p> <code>mode</code> <code>list</code> <p>Motion mode</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.LSR","title":"<code>LSR(alpha, beta, dist)</code>","text":"<p>Left-Straight-Right generation mode.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Initial pose of (0, 0, alpha)</p> required <code>beta</code> <code>float</code> <p>Goal pose of (dist, 0, beta)</p> required <code>dist</code> <code>float</code> <p>The distance between the initial and goal pose</p> required <p>Returns:</p> Name Type Description <code>t</code> <code>float</code> <p>Moving lenght of segments</p> <code>p</code> <code>float</code> <p>Moving lenght of segments</p> <code>q</code> <code>float</code> <p>Moving lenght of segments</p> <code>mode</code> <code>list</code> <p>Motion mode</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.RLR","title":"<code>RLR(alpha, beta, dist)</code>","text":"<p>Right-Left-Right generation mode.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Initial pose of (0, 0, alpha)</p> required <code>beta</code> <code>float</code> <p>Goal pose of (dist, 0, beta)</p> required <code>dist</code> <code>float</code> <p>The distance between the initial and goal pose</p> required <p>Returns:</p> Name Type Description <code>t</code> <code>float</code> <p>Moving lenght of segments</p> <code>p</code> <code>float</code> <p>Moving lenght of segments</p> <code>q</code> <code>float</code> <p>Moving lenght of segments</p> <code>mode</code> <code>list</code> <p>Motion mode</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.RSL","title":"<code>RSL(alpha, beta, dist)</code>","text":"<p>Right-Straight-Left generation mode.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Initial pose of (0, 0, alpha)</p> required <code>beta</code> <code>float</code> <p>Goal pose of (dist, 0, beta)</p> required <code>dist</code> <code>float</code> <p>The distance between the initial and goal pose</p> required <p>Returns:</p> Name Type Description <code>t</code> <code>float</code> <p>Moving lenght of segments</p> <code>p</code> <code>float</code> <p>Moving lenght of segments</p> <code>q</code> <code>float</code> <p>Moving lenght of segments</p> <code>mode</code> <code>list</code> <p>Motion mode</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.RSR","title":"<code>RSR(alpha, beta, dist)</code>","text":"<p>Right-Straight-Right generation mode.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Initial pose of (0, 0, alpha)</p> required <code>beta</code> <code>float</code> <p>Goal pose of (dist, 0, beta)</p> required <p>Returns:</p> Name Type Description <code>t</code> <code>float</code> <p>Moving lenght of segments</p> <code>p</code> <code>float</code> <p>Moving lenght of segments</p> <code>q</code> <code>float</code> <p>Moving lenght of segments</p> <code>mode</code> <code>list</code> <p>Motion mode</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.generation","title":"<code>generation(start_pose, goal_pose)</code>","text":"<p>Generate the Dubins Curve.</p> <p>Parameters:</p> Name Type Description Default <code>start_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <code>goal_pose</code> <code>tuple</code> <p>Target pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>best_cost</code> <code>float</code> <p>Best planning path length</p> <code>best_mode</code> <code>list</code> <p>Best motion modes</p> <code>x_list</code> <code>list</code> <p>Trajectory of x</p> <code>y_list</code> <code>list</code> <p>Trajectory of y</p> <code>yaw_list</code> <code>list</code> <p>Trajectory of yaw</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.interpolate","title":"<code>interpolate(mode, length, init_pose)</code>","text":"<p>Planning path interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>motion, e.g., L, S, R</p> required <code>length</code> <code>float</code> <p>Single step motion path length</p> required <code>init_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>new_pose</code> <code>tuple</code> <p>New pose (new_x, new_y, new_yaw) after moving</p>"},{"location":"curve_generation/dubins_curve/Dubins/#python_motion_planning.curve_generation.dubins_curve.Dubins.run","title":"<code>run(points)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required"},{"location":"curve_generation/fem_pos_smooth/FemPosSmoother/","title":"FemPosSmoother","text":""},{"location":"curve_generation/fem_pos_smooth/FemPosSmoother/#python_motion_planning.curve_generation.fem_pos_smooth.FemPosSmoother","title":"<code>python_motion_planning.curve_generation.fem_pos_smooth.FemPosSmoother</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for Fem-pos smoother.</p> <p>Parameters:</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import FemPosSmoother\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = FemPosSmoother(w_smooth, w_length, w_ref, dx_l, dx_u, dy_l, dy_u)\n&gt;&gt;&gt; generator.run(points)\n</code></pre>"},{"location":"curve_generation/fem_pos_smooth/FemPosSmoother/#python_motion_planning.curve_generation.fem_pos_smooth.FemPosSmoother.run","title":"<code>run(points, display=True)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required"},{"location":"curve_generation/polynomial_curve/Polynomial/","title":"Polynomial","text":""},{"location":"curve_generation/polynomial_curve/Polynomial/#python_motion_planning.curve_generation.polynomial_curve.Polynomial","title":"<code>python_motion_planning.curve_generation.polynomial_curve.Polynomial</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for polynomial curve generation(Quintic).</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required <code>max_acc</code> <code>float</code> <p>Maximum acceleration</p> required <code>max_jerk</code> <code>float</code> <p>Maximum jerk</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import Polynomial\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = Polynomial(step, max_acc, max_jerk)\n&gt;&gt;&gt; generator.run(points)\n</code></pre>"},{"location":"curve_generation/polynomial_curve/Polynomial/#python_motion_planning.curve_generation.polynomial_curve.Polynomial.Poly","title":"<code>Poly</code>","text":"<p>Polynomial interpolation solver</p>"},{"location":"curve_generation/polynomial_curve/Polynomial/#python_motion_planning.curve_generation.polynomial_curve.Polynomial.Trajectory","title":"<code>Trajectory</code>","text":"<p>Polynomial interpolation solver</p>"},{"location":"curve_generation/polynomial_curve/Polynomial/#python_motion_planning.curve_generation.polynomial_curve.Polynomial.generation","title":"<code>generation(start_pose, goal_pose)</code>","text":"<p>Generate the polynomial Curve.</p> <p>Parameters:</p> Name Type Description Default <code>start_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <code>goal_pose</code> <code>tuple</code> <p>Target pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>traj</code> <code>Traj</code> <p>The first trajectory that satisfies the acceleration and jerk constraint</p>"},{"location":"curve_generation/polynomial_curve/Polynomial/#python_motion_planning.curve_generation.polynomial_curve.Polynomial.run","title":"<code>run(points)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required"},{"location":"curve_generation/reeds_shepp/ReedsShepp/","title":"ReedsShepp","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp","title":"<code>python_motion_planning.curve_generation.reeds_shepp.ReedsShepp</code>","text":"<p>               Bases: <code>Curve</code></p> <p>Class for Reeds shepp curve generation.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>float</code> <p>Simulation or interpolation size</p> required <code>max_curv</code> <code>float</code> <p>The maximum curvature of the curve</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.curve_generation import ReedsShepp\n&gt;&gt;&gt;     points = [(0, 0, 0), (10, 10, -90), (20, 5, 60)]\n&gt;&gt;&gt; generator = ReedsShepp(step, max_curv)\n&gt;&gt;&gt; generator.run(points)\n</code></pre> References <p>[1] Optimal paths for a car that goes both forwards and backwards</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.Path","title":"<code>Path</code>","text":"<p>class for Path element</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCC","title":"<code>CCC(x, y, phi)</code>","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCC--8","title":"8","text":"<p>Circle-Circle-Circle generation mode(using reflect, timeflip and backwards).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x of goal position</p> required <code>y</code> <code>float</code> <p>y of goal position</p> required <code>phi</code> <code>float</code> <p>goal orientation</p> required <p>Returns:</p> Name Type Description <code>paths</code> <code>list</code> <p>Available paths</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCCC","title":"<code>CCCC(x, y, phi)</code>","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCCC--8","title":"8","text":"<p>Circle-Circle(beta)-Circle(beta)-Circle generation mode (using reflect, timeflip and backwards).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x of goal position</p> required <code>y</code> <code>float</code> <p>y of goal position</p> required <code>phi</code> <code>float</code> <p>goal orientation</p> required <p>Returns:</p> Name Type Description <code>paths</code> <code>list</code> <p>Available paths</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCSC","title":"<code>CCSC(x, y, phi)</code>","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCSC--16","title":"16","text":"<p>Circle-Circle(pi/2)-Straight-Circle and Circle-Straight-Circle(pi/2)-Circle generation mode (using reflect, timeflip and backwards).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x of goal position</p> required <code>y</code> <code>float</code> <p>y of goal position</p> required <code>phi</code> <code>float</code> <p>goal orientation</p> required <p>Returns:</p> Name Type Description <code>paths</code> <code>list</code> <p>Available paths</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCSCC","title":"<code>CCSCC(x, y, phi)</code>","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CCSCC--4","title":"4","text":"<p>Circle-Circle(pi/2)-Straight--Circle(pi/2)-Circle generation mode (using reflect, timeflip and backwards).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x of goal position</p> required <code>y</code> <code>float</code> <p>y of goal position</p> required <code>phi</code> <code>float</code> <p>goal orientation</p> required <p>Returns:</p> Name Type Description <code>paths</code> <code>list</code> <p>Available paths</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CSC","title":"<code>CSC(x, y, phi)</code>","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.CSC--8","title":"8","text":"<p>Circle-Straight-Circle generation mode(using reflect, timeflip and backwards).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x of goal position</p> required <code>y</code> <code>float</code> <p>y of goal position</p> required <code>phi</code> <code>float</code> <p>goal orientation</p> required <p>Returns:</p> Name Type Description <code>paths</code> <code>list</code> <p>Available paths</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LRL","title":"<code>LRL(x, y, phi)</code>","text":"<p>Left-Right-Left generation mode. (L+R-L-)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LRLRn","title":"<code>LRLRn(x, y, phi)</code>","text":"<p>Left-Right(beta)-Left(beta)-Right generation mode. (L+R+L-R-)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LRLRp","title":"<code>LRLRp(x, y, phi)</code>","text":"<p>Left-Right(beta)-Left(beta)-Right generation mode. (L+R-L-R+)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LRSL","title":"<code>LRSL(x, y, phi)</code>","text":"<p>Left-Right(pi/2)-Straight-Left generation mode. (L+R-S-L-)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LRSLR","title":"<code>LRSLR(x, y, phi)</code>","text":"<p>Left-Right(pi/2)-Straight-Left(pi/2)-Right generation mode. (L+R-S-L-R+)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LRSR","title":"<code>LRSR(x, y, phi)</code>","text":"<p>Left-Right(pi/2)-Straight-Right generation mode. (L+R-S-R-)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LSL","title":"<code>LSL(x, y, phi)</code>","text":"<p>Left-Straight-Left generation mode. (L+S+L+)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.LSR","title":"<code>LSR(x, y, phi)</code>","text":"<p>Left-Straight-Right generation mode. (L+S+R+)</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.M","title":"<code>M(theta)</code>","text":"<p>Truncate the angle to the interval of -\u03c0 to \u03c0.</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>float</code> <p>Angle value</p> required <p>Returns:</p> Name Type Description <code>theta</code> <code>float</code> <p>Truncated angle value</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.R","title":"<code>R(x, y)</code>","text":"<p>Return the polar coordinates (r, theta) of the point (x, y) i.e. rcos(theta) = x; rsin(theta) = y</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x-coordinate value</p> required <code>y</code> <code>float</code> <p>y-coordinate value</p> required <p>Returns:</p> Type Description <p>r, theta (float): Polar coordinates</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.SCS","title":"<code>SCS(x, y, phi)</code>","text":""},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.SCS--2","title":"2","text":"<p>Straight-Circle-Straight generation mode(using reflect).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x of goal position</p> required <code>y</code> <code>float</code> <p>y of goal position</p> required <code>phi</code> <code>float</code> <p>goal orientation</p> required <p>Returns:</p> Name Type Description <code>paths</code> <code>list</code> <p>Available paths</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.SLS","title":"<code>SLS(x, y, phi)</code>","text":"<p>Straight-Left-Straight generation mode.</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.generation","title":"<code>generation(start_pose, goal_pose)</code>","text":"<p>Generate the Reeds Shepp Curve.</p> <p>Parameters:</p> Name Type Description Default <code>start_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <code>goal_pose</code> <code>tuple</code> <p>Target pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>best_cost</code> <code>float</code> <p>Best planning path length</p> <code>best_mode</code> <p>Best motion modes</p> <code>x_list</code> <code>list</code> <p>Trajectory of x</p> <code>y_list</code> <code>list</code> <p>Trajectory of y</p> <code>yaw_list</code> <code>list</code> <p>Trajectory of yaw</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.interpolate","title":"<code>interpolate(mode, length, init_pose)</code>","text":"<p>Planning path interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>motion, e.g., L, S, R</p> required <code>length</code> <code>float</code> <p>Single step motion path length</p> required <code>init_pose</code> <code>tuple</code> <p>Initial pose (x, y, yaw)</p> required <p>Returns:</p> Name Type Description <code>new_pose</code> <code>tuple</code> <p>New pose (new_x, new_y, new_yaw) after moving</p>"},{"location":"curve_generation/reeds_shepp/ReedsShepp/#python_motion_planning.curve_generation.reeds_shepp.ReedsShepp.run","title":"<code>run(points)</code>","text":"<p>Running both generation and animation.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[tuple]</code> <p>path points</p> required"},{"location":"global_planner/evolutionary_search/aco/ACO/","title":"ACO","text":""},{"location":"global_planner/evolutionary_search/aco/ACO/#python_motion_planning.global_planner.evolutionary_search.aco.ACO","title":"<code>python_motion_planning.global_planner.evolutionary_search.aco.ACO</code>","text":"<p>               Bases: <code>EvolutionarySearcher</code></p> <p>Class for Ant Colony Optimization(ACO) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type, default is euclidean</p> <code>'euclidean'</code> <code>n_ants</code> <code>int</code> <p>number of ants</p> <code>50</code> <code>alpha</code> <code>float</code> <p>pheromone and heuristic factor weight coefficient</p> <code>1.0</code> <code>beta</code> <code>float</code> <p>pheromone and heuristic factor weight coefficient</p> <code>5.0</code> <code>rho</code> <code>float</code> <p>evaporation coefficient</p> <code>0.1</code> <code>Q</code> <code>float</code> <p>pheromone gain</p> <code>1.0</code> <code>max_iter</code> <code>int</code> <p>maximum iterations</p> <code>100</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.ACO((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, cost_list = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, cost_curve=cost_list)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Ant Colony Optimization: A New Meta-Heuristic</p>"},{"location":"global_planner/evolutionary_search/aco/ACO/#python_motion_planning.global_planner.evolutionary_search.aco.ACO.getNeighbor","title":"<code>getNeighbor(node)</code>","text":"<p>Find neighbors of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>current node</p> required <p>Returns:</p> Name Type Description <code>neighbors</code> <code>list</code> <p>neighbors of current node</p>"},{"location":"global_planner/evolutionary_search/aco/ACO/#python_motion_planning.global_planner.evolutionary_search.aco.ACO.plan","title":"<code>plan()</code>","text":"<p>Ant Colony Optimization(ACO) motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p>"},{"location":"global_planner/evolutionary_search/aco/ACO/#python_motion_planning.global_planner.evolutionary_search.aco.ACO.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/evolutionary_search/evolutionary_search/EvolutionarySearcher/","title":"EvolutionarySearcher","text":""},{"location":"global_planner/evolutionary_search/evolutionary_search/EvolutionarySearcher/#python_motion_planning.global_planner.evolutionary_search.evolutionary_search.EvolutionarySearcher","title":"<code>python_motion_planning.global_planner.evolutionary_search.evolutionary_search.EvolutionarySearcher</code>","text":"<p>               Bases: <code>Planner</code></p> <p>Base class for planner based on evolutionary searching.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code>"},{"location":"global_planner/evolutionary_search/evolutionary_search/EvolutionarySearcher/#python_motion_planning.global_planner.evolutionary_search.evolutionary_search.EvolutionarySearcher.cost","title":"<code>cost(node1, node2)</code>","text":"<p>Calculate cost for this motion.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>node 1</p> required <code>node2</code> <code>Node</code> <p>node 2</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>cost of this motion</p>"},{"location":"global_planner/evolutionary_search/evolutionary_search/EvolutionarySearcher/#python_motion_planning.global_planner.evolutionary_search.evolutionary_search.EvolutionarySearcher.h","title":"<code>h(node, goal)</code>","text":"<p>Calculate heuristic.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>current node</p> required <code>goal</code> <code>Node</code> <p>goal node</p> required <p>Returns:</p> Name Type Description <code>h</code> <code>float</code> <p>heuristic function value of node</p>"},{"location":"global_planner/evolutionary_search/evolutionary_search/EvolutionarySearcher/#python_motion_planning.global_planner.evolutionary_search.evolutionary_search.EvolutionarySearcher.isCollision","title":"<code>isCollision(node1, node2)</code>","text":"<p>Judge collision when moving from node1 to node2.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>node 1</p> required <code>node2</code> <code>Node</code> <p>node 2</p> required <p>Returns:</p> Name Type Description <code>collision</code> <code>bool</code> <p>True if collision exists else False</p>"},{"location":"global_planner/evolutionary_search/pso/PSO/","title":"PSO","text":""},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO","title":"<code>python_motion_planning.global_planner.evolutionary_search.pso.PSO</code>","text":"<p>               Bases: <code>EvolutionarySearcher</code></p> <p>Class for Particle Swarm Optimization (PSO) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>n_particles</code> <code>int</code> <p>number of particles</p> <code>300</code> <code>w_inertial</code> <code>float</code> <p>inertial weight</p> <code>1.0</code> <code>w_cognitive</code> <code>float</code> <p>cognitive weight</p> <code>1.0</code> <code>w_social</code> <code>float</code> <p>social weight</p> <code>1.0</code> <code>point_num</code> <code>int</code> <p>number of position points contained in each particle</p> <code>5</code> <code>max_speed</code> <code>int</code> <p>The maximum velocity of particle motion</p> <code>6</code> <code>max_iter</code> <code>int</code> <p>maximum iterations</p> <code>200</code> <code>init_mode</code> <code>int</code> <p>Set the generation mode for the initial position points of the particle swarm</p> <code>GEN_MODE_RANDOM</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.PSO((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, fitness_history = planner.plan(verbose=True)     # planning results only\n&gt;&gt;&gt; cost_curve = [-f for f in fitness_history]\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, cost_curve=cost_curve)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre>"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.calFitnessValue","title":"<code>calFitnessValue(position)</code>","text":"<p>Calculate the value of fitness function.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>list</code> <p>control points calculated by PSO</p> required <p>Returns:</p> Name Type Description <code>fitness</code> <code>float</code> <p>the value of fitness function</p>"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.initializePositions","title":"<code>initializePositions()</code>","text":"<p>Generate n particles with pointNum_ positions each within the map range.</p> <p>Returns:</p> Name Type Description <code>init_positions</code> <code>list</code> <p>initial position sequence of particle swarm</p>"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.isCollision","title":"<code>isCollision(p1, p2)</code>","text":"<p>Judge collision when moving from node1 to node2 using Bresenham.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>tuple</code> <p>start point</p> required <code>p2</code> <code>tuple</code> <p>end point</p> required <p>Returns:</p> Name Type Description <code>collision</code> <code>bool</code> <p>True if collision exists, False otherwise.</p>"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.optimizeParticle","title":"<code>optimizeParticle(particle)</code>","text":"<p>Particle update optimization iteration</p> <p>Parameters:</p> Name Type Description Default <code>particle</code> <code>Particle</code> <p>the particle</p> required"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.plan","title":"<code>plan(verbose=False)</code>","text":"<p>Particle Swarm Optimization (PSO) motion plan function.</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>bool</code> <p>print the best fitness value of each iteration</p> <code>False</code> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p>"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.updateParticlePosition","title":"<code>updateParticlePosition(particle)</code>","text":"<p>A function to update the particle position</p> <p>Parameters:</p> Name Type Description Default <code>particle</code> <code>Particle</code> <p>the particle</p> required"},{"location":"global_planner/evolutionary_search/pso/PSO/#python_motion_planning.global_planner.evolutionary_search.pso.PSO.updateParticleVelocity","title":"<code>updateParticleVelocity(particle)</code>","text":"<p>A function to update the particle velocity</p> <p>Parameters:</p> Name Type Description Default <code>particle</code> <code>Particle</code> <p>the particle</p> required"},{"location":"global_planner/graph_search/a_star/AStar/","title":"AStar","text":""},{"location":"global_planner/graph_search/a_star/AStar/#python_motion_planning.global_planner.graph_search.a_star.AStar","title":"<code>python_motion_planning.global_planner.graph_search.a_star.AStar</code>","text":"<p>               Bases: <code>GraphSearcher</code></p> <p>Class for A* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.AStar((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] A Formal Basis for the heuristic Determination of Minimum Cost Paths</p>"},{"location":"global_planner/graph_search/a_star/AStar/#python_motion_planning.global_planner.graph_search.a_star.AStar.extractPath","title":"<code>extractPath(closed_list)</code>","text":"<p>Extract the path based on the CLOSED list.</p> <p>Parameters:</p> Name Type Description Default <code>closed_list</code> <code>dict</code> <p>CLOSED list</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>the cost of planned path</p> <code>path</code> <code>list</code> <p>the planning path</p>"},{"location":"global_planner/graph_search/a_star/AStar/#python_motion_planning.global_planner.graph_search.a_star.AStar.getNeighbor","title":"<code>getNeighbor(node)</code>","text":"<p>Find neighbors of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>current node</p> required <p>Returns:</p> Name Type Description <code>neighbors</code> <code>list</code> <p>neighbors of current node</p>"},{"location":"global_planner/graph_search/a_star/AStar/#python_motion_planning.global_planner.graph_search.a_star.AStar.plan","title":"<code>plan()</code>","text":"<p>A* motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>all nodes that planner has searched</p>"},{"location":"global_planner/graph_search/a_star/AStar/#python_motion_planning.global_planner.graph_search.a_star.AStar.run","title":"<code>run()</code>","text":"<p>Running both planning and animation.</p>"},{"location":"global_planner/graph_search/d_star/DNode/","title":"DNode","text":""},{"location":"global_planner/graph_search/d_star/DNode/#python_motion_planning.global_planner.graph_search.d_star.DNode","title":"<code>python_motion_planning.global_planner.graph_search.d_star.DNode</code>","text":"<p>               Bases: <code>Node</code></p> <p>Class for D* nodes.</p> <p>Parameters:</p> Name Type Description Default <code>current</code> <code>tuple</code> <p>current coordinate</p> required <code>parent</code> <code>tuple</code> <p>coordinate of parent node</p> required <code>t</code> <code>str</code> <p>state of node, including <code>NEW</code> <code>OPEN</code> and <code>CLOSED</code></p> required <code>h</code> <code>float</code> <p>cost from goal to current node</p> required <code>k</code> <code>float</code> <p>minimum cost from goal to current node in history</p> required"},{"location":"global_planner/graph_search/d_star/DStar/","title":"DStar","text":""},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar","title":"<code>python_motion_planning.global_planner.graph_search.d_star.DStar</code>","text":"<p>               Bases: <code>GraphSearcher</code></p> <p>Class for D* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.DStar((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, _ = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1]Optimal and Efficient Path Planning for Partially-Known Environments</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.min_k","title":"<code>min_k: float</code>  <code>property</code>","text":"<p>Choose the minimum k value for nodes in OPEN list.</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.min_state","title":"<code>min_state: DNode</code>  <code>property</code>","text":"<p>Choose the node with the minimum k value in OPEN list.</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.OnPress","title":"<code>OnPress(event)</code>","text":"<p>Mouse button callback function.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>MouseEvent</code> <p>mouse event</p> required"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.delete","title":"<code>delete(node)</code>","text":"<p>Delete node from OPEN list.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>DNode</code> <p>the node to delete</p> required"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.extractPath","title":"<code>extractPath(closed_list)</code>","text":"<p>Extract the path based on the CLOSED list.</p> <p>Parameters:</p> Name Type Description Default <code>closed_list</code> <code>dict</code> <p>CLOSED list</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>the cost of planning path</p> <code>path</code> <code>list</code> <p>the planning path</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.getNeighbor","title":"<code>getNeighbor(node)</code>","text":"<p>Find neighbors of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>DNode</code> <p>current node</p> required <p>Returns:</p> Name Type Description <code>neighbors</code> <code>list</code> <p>neighbors of current node</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.insert","title":"<code>insert(node, h_new)</code>","text":"<p>Insert node into OPEN list.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>DNode</code> <p>the node to insert</p> required <code>h_new</code> <code>float</code> <p>new or better cost to come value</p> required"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.modify","title":"<code>modify(node, node_parent)</code>","text":"<p>Start processing from node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>DNode</code> <p>the node to modify</p> required <code>node_parent</code> <code>DNode</code> <p>the parent node of <code>node</code></p> required"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.plan","title":"<code>plan()</code>","text":"<p>D* static motion planning function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>_</code> <code>None</code> <p>None</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.processState","title":"<code>processState()</code>","text":"<p>Broadcast dynamic obstacle information.</p> <p>Returns:</p> Name Type Description <code>min_k</code> <code>float</code> <p>minimum k value of map</p>"},{"location":"global_planner/graph_search/d_star/DStar/#python_motion_planning.global_planner.graph_search.d_star.DStar.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/graph_search/d_star_lite/DStarLite/","title":"DStarLite","text":""},{"location":"global_planner/graph_search/d_star_lite/DStarLite/#python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite","title":"<code>python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite</code>","text":"<p>               Bases: <code>LPAStar</code></p> <p>Class for D* Lite motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.DStarLite((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, _ = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] D* Lite</p>"},{"location":"global_planner/graph_search/d_star_lite/DStarLite/#python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite.OnPress","title":"<code>OnPress(event)</code>","text":"<p>Mouse button callback function.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>MouseEvent</code> <p>mouse event</p> required"},{"location":"global_planner/graph_search/d_star_lite/DStarLite/#python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite.calculateKey","title":"<code>calculateKey(node)</code>","text":"<p>Calculate priority of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>LNode</code> <p>the node to be calculated</p> required <p>Returns:</p> Name Type Description <code>key</code> <code>list</code> <p>the priority of node</p>"},{"location":"global_planner/graph_search/d_star_lite/DStarLite/#python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite.computeShortestPath","title":"<code>computeShortestPath()</code>","text":"<p>Perceived dynamic obstacle information to optimize global path.</p>"},{"location":"global_planner/graph_search/d_star_lite/DStarLite/#python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite.extractPath","title":"<code>extractPath()</code>","text":"<p>Extract the path based on greedy policy.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>the cost of planning path</p> <code>path</code> <code>list</code> <p>the planning path</p>"},{"location":"global_planner/graph_search/d_star_lite/DStarLite/#python_motion_planning.global_planner.graph_search.d_star_lite.DStarLite.updateVertex","title":"<code>updateVertex(node)</code>","text":"<p>Update the status and the current cost to node and it's neighbor.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>LNode</code> <p>the node to be updated</p> required"},{"location":"global_planner/graph_search/dijkstra/Dijkstra/","title":"Dijkstra","text":""},{"location":"global_planner/graph_search/dijkstra/Dijkstra/#python_motion_planning.global_planner.graph_search.dijkstra.Dijkstra","title":"<code>python_motion_planning.global_planner.graph_search.dijkstra.Dijkstra</code>","text":"<p>               Bases: <code>AStar</code></p>"},{"location":"global_planner/graph_search/dijkstra/Dijkstra/#python_motion_planning.global_planner.graph_search.dijkstra.Dijkstra.plan","title":"<code>plan()</code>","text":"<p>Class for Dijkstra motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.Dijkstra((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre>"},{"location":"global_planner/graph_search/gbfs/GBFS/","title":"GBFS","text":""},{"location":"global_planner/graph_search/gbfs/GBFS/#python_motion_planning.global_planner.graph_search.gbfs.GBFS","title":"<code>python_motion_planning.global_planner.graph_search.gbfs.GBFS</code>","text":"<p>               Bases: <code>AStar</code></p>"},{"location":"global_planner/graph_search/gbfs/GBFS/#python_motion_planning.global_planner.graph_search.gbfs.GBFS.plan","title":"<code>plan()</code>","text":"<p>Class for Greedy Best First Search.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.GBFS((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre>"},{"location":"global_planner/graph_search/graph_search/GraphSearcher/","title":"GraphSearcher","text":""},{"location":"global_planner/graph_search/graph_search/GraphSearcher/#python_motion_planning.global_planner.graph_search.graph_search.GraphSearcher","title":"<code>python_motion_planning.global_planner.graph_search.graph_search.GraphSearcher</code>","text":"<p>               Bases: <code>Planner</code></p> <p>Base class for planner based on graph searching.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code>"},{"location":"global_planner/graph_search/graph_search/GraphSearcher/#python_motion_planning.global_planner.graph_search.graph_search.GraphSearcher.cost","title":"<code>cost(node1, node2)</code>","text":"<p>Calculate cost for this motion.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>node 1</p> required <code>node2</code> <code>Node</code> <p>node 2</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>cost of this motion</p>"},{"location":"global_planner/graph_search/graph_search/GraphSearcher/#python_motion_planning.global_planner.graph_search.graph_search.GraphSearcher.h","title":"<code>h(node, goal)</code>","text":"<p>Calculate heuristic.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>current node</p> required <code>goal</code> <code>Node</code> <p>goal node</p> required <p>Returns:</p> Name Type Description <code>h</code> <code>float</code> <p>heuristic function value of node</p>"},{"location":"global_planner/graph_search/graph_search/GraphSearcher/#python_motion_planning.global_planner.graph_search.graph_search.GraphSearcher.isCollision","title":"<code>isCollision(node1, node2)</code>","text":"<p>Judge collision when moving from node1 to node2.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>node 1</p> required <code>node2</code> <code>Node</code> <p>node 2</p> required <p>Returns:</p> Name Type Description <code>collision</code> <code>bool</code> <p>True if collision exists else False</p>"},{"location":"global_planner/graph_search/jps/JPS/","title":"JPS","text":""},{"location":"global_planner/graph_search/jps/JPS/#python_motion_planning.global_planner.graph_search.jps.JPS","title":"<code>python_motion_planning.global_planner.graph_search.jps.JPS</code>","text":"<p>               Bases: <code>AStar</code></p> <p>Class for JPS motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.JPS((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Online Graph Pruning for Pathfinding On Grid Maps</p>"},{"location":"global_planner/graph_search/jps/JPS/#python_motion_planning.global_planner.graph_search.jps.JPS.detectForceNeighbor","title":"<code>detectForceNeighbor(node, motion)</code>","text":"<p>Detect forced neighbor of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>current node</p> required <code>motion</code> <code>Node</code> <p>the motion that current node executes</p> required <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>True if current node has forced neighbor else Flase</p>"},{"location":"global_planner/graph_search/jps/JPS/#python_motion_planning.global_planner.graph_search.jps.JPS.jump","title":"<code>jump(node, motion)</code>","text":"<p>Jumping search recursively.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>current node</p> required <code>motion</code> <code>Node</code> <p>the motion that current node executes</p> required <p>Returns:</p> Name Type Description <code>jump_point</code> <code>Node</code> <p>jump point or None if searching fails</p>"},{"location":"global_planner/graph_search/jps/JPS/#python_motion_planning.global_planner.graph_search.jps.JPS.plan","title":"<code>plan()</code>","text":"<p>JPS motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>all nodes that planner has searched</p>"},{"location":"global_planner/graph_search/lazy_theta_star/LazyThetaStar/","title":"LazyThetaStar","text":""},{"location":"global_planner/graph_search/lazy_theta_star/LazyThetaStar/#python_motion_planning.global_planner.graph_search.lazy_theta_star.LazyThetaStar","title":"<code>python_motion_planning.global_planner.graph_search.lazy_theta_star.LazyThetaStar</code>","text":"<p>               Bases: <code>ThetaStar</code></p> <p>Class for Lazy Theta* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.LazyThetaStar((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Lazy Theta*: Any-Angle Path Planning and Path Length Analysis in 3D</p>"},{"location":"global_planner/graph_search/lazy_theta_star/LazyThetaStar/#python_motion_planning.global_planner.graph_search.lazy_theta_star.LazyThetaStar.plan","title":"<code>plan()</code>","text":"<p>Lazy Theta* motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>all nodes that planner has searched</p>"},{"location":"global_planner/graph_search/lazy_theta_star/LazyThetaStar/#python_motion_planning.global_planner.graph_search.lazy_theta_star.LazyThetaStar.updateVertex","title":"<code>updateVertex(node_p, node_c)</code>","text":"<p>Update extend node information with current node's parent node.</p> <p>Parameters:</p> Name Type Description Default <code>node_p</code> <code>Node</code> <p>parent node</p> required <code>node_c</code> <code>Node</code> <p>current node</p> required"},{"location":"global_planner/graph_search/lpa_star/LNode/","title":"LNode","text":""},{"location":"global_planner/graph_search/lpa_star/LNode/#python_motion_planning.global_planner.graph_search.lpa_star.LNode","title":"<code>python_motion_planning.global_planner.graph_search.lpa_star.LNode</code>","text":"<p>               Bases: <code>Node</code></p> <p>Class for LPA* nodes.</p> <p>Parameters:</p> Name Type Description Default <code>current</code> <code>tuple</code> <p>current coordinate</p> required <code>g</code> <code>float</code> <p>minimum cost moving from start(predict)</p> required <code>rhs</code> <code>float</code> <p>minimum cost moving from start(value)</p> required <code>key</code> <code>list</code> <p>priority</p> required"},{"location":"global_planner/graph_search/lpa_star/LPAStar/","title":"LPAStar","text":""},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar","title":"<code>python_motion_planning.global_planner.graph_search.lpa_star.LPAStar</code>","text":"<p>               Bases: <code>GraphSearcher</code></p> <p>Class for LPA* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.LPAStar((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, _ = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Lifelong Planning A*</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.OnPress","title":"<code>OnPress(event)</code>","text":"<p>Mouse button callback function.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>MouseEvent</code> <p>mouse event</p> required"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.calculateKey","title":"<code>calculateKey(node)</code>","text":"<p>Calculate priority of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>LNode</code> <p>current node</p> required <p>Returns:</p> Name Type Description <code>key</code> <code>list</code> <p>priority of node</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.computeShortestPath","title":"<code>computeShortestPath()</code>","text":"<p>Perceived dynamic obstacle information to optimize global path.</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.extractPath","title":"<code>extractPath()</code>","text":"<p>Extract the path based on greedy policy.</p> Return <p>cost (float): the cost of planning path path (list): the planning path</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.getNeighbor","title":"<code>getNeighbor(node)</code>","text":"<p>Find neighbors of node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>LNode</code> <p>current node</p> required <p>Returns:</p> Name Type Description <code>neighbors</code> <code>list</code> <p>neighbors of node</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.plan","title":"<code>plan()</code>","text":"<p>LPA* dynamic motion planning function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>_</code> <code>None</code> <p>None</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/graph_search/lpa_star/LPAStar/#python_motion_planning.global_planner.graph_search.lpa_star.LPAStar.updateVertex","title":"<code>updateVertex(node)</code>","text":"<p>Update the status and the current cost to node and it's neighbor.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>LNode</code> <p>current node</p> required"},{"location":"global_planner/graph_search/s_theta_star/SThetaStar/","title":"SThetaStar","text":""},{"location":"global_planner/graph_search/s_theta_star/SThetaStar/#python_motion_planning.global_planner.graph_search.s_theta_star.SThetaStar","title":"<code>python_motion_planning.global_planner.graph_search.s_theta_star.SThetaStar</code>","text":"<p>               Bases: <code>ThetaStar</code></p> <p>Class for S-Theta* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.SThetaStar((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] S-Theta*: low steering path-planning algorithm</p>"},{"location":"global_planner/graph_search/s_theta_star/SThetaStar/#python_motion_planning.global_planner.graph_search.s_theta_star.SThetaStar.getAlpha","title":"<code>getAlpha(node_p, node_c)</code>","text":"<p>\u03b1(t) represents the deviation in the trajectory to reach the goal node g through the node t in relation to the straight-line distance between the parent of its predecessor (t \u2208 succ(p) and parent(p) = q) and the goal node.</p> <p>Parameters:</p> Name Type Description Default <code>node_p</code> <code>Node</code> <p>parent node</p> required <code>node_c</code> <code>Node</code> <p>current node</p> required <p>Returns:</p> Name Type Description <code>alpha</code> <code>float</code> <p>alpha angle</p>"},{"location":"global_planner/graph_search/s_theta_star/SThetaStar/#python_motion_planning.global_planner.graph_search.s_theta_star.SThetaStar.plan","title":"<code>plan()</code>","text":"<p>S-Theta* motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>all nodes that planner has searched</p>"},{"location":"global_planner/graph_search/s_theta_star/SThetaStar/#python_motion_planning.global_planner.graph_search.s_theta_star.SThetaStar.updateVertex","title":"<code>updateVertex(node_p, node_c, alpha)</code>","text":"<p>Update extend node information with current node's parent node.</p> <p>Parameters:</p> Name Type Description Default <code>node_p</code> <code>Node</code> <p>parent node</p> required <code>node_c</code> <code>Node</code> <p>current node</p> required <code>alpha</code> <code>float</code> <p>alpha angle</p> required"},{"location":"global_planner/graph_search/theta_star/ThetaStar/","title":"ThetaStar","text":""},{"location":"global_planner/graph_search/theta_star/ThetaStar/#python_motion_planning.global_planner.graph_search.theta_star.ThetaStar","title":"<code>python_motion_planning.global_planner.graph_search.theta_star.ThetaStar</code>","text":"<p>               Bases: <code>AStar</code></p> <p>Class for Theta* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.ThetaStar((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Theta*: Any-Angle Path Planning on Grids [2] Any-angle path planning on non-uniform costmaps</p>"},{"location":"global_planner/graph_search/theta_star/ThetaStar/#python_motion_planning.global_planner.graph_search.theta_star.ThetaStar.lineOfSight","title":"<code>lineOfSight(node1, node2)</code>","text":"<p>Judge collision when moving from node1 to node2 using Bresenham.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>start node</p> required <code>node2</code> <code>Node</code> <p>end node</p> required <p>Returns:</p> Name Type Description <code>line_of_sight</code> <code>bool</code> <p>True if line of sight exists ( no collision ) else False</p>"},{"location":"global_planner/graph_search/theta_star/ThetaStar/#python_motion_planning.global_planner.graph_search.theta_star.ThetaStar.plan","title":"<code>plan()</code>","text":"<p>Theta* motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>all nodes that planner has searched</p>"},{"location":"global_planner/graph_search/theta_star/ThetaStar/#python_motion_planning.global_planner.graph_search.theta_star.ThetaStar.updateVertex","title":"<code>updateVertex(node_p, node_c)</code>","text":"<p>Update extend node information with current node's parent node.</p> <p>Parameters:</p> Name Type Description Default <code>node_p</code> <code>Node</code> <p>parent node</p> required <code>node_c</code> <code>Node</code> <p>current node</p> required"},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/","title":"VoronoiPlanner","text":""},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/#python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner","title":"<code>python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner</code>","text":"<p>               Bases: <code>GraphSearcher</code></p> <p>Class for Voronoi-based motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type, default is euclidean</p> <code>'euclidean'</code> <code>n_knn</code> <code>int</code> <p>number of edges from one sampled point</p> <code>10</code> <code>max_edge_len</code> <code>float</code> <p>maximum edge length</p> <code>10.0</code> <code>inflation_r</code> <code>float</code> <p>inflation range</p> <code>1.0</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.VoronoiPlanner((5, 5), (45, 25), pmp.Grid(51, 31))\n&gt;&gt;&gt; cost, path, _ = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre>"},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/#python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner.extractPath","title":"<code>extractPath(closed_list)</code>","text":"<p>Extract the path based on the CLOSED list.</p> <p>Parameters:</p> Name Type Description Default <code>closed_list</code> <code>dict</code> <p>CLOSED list</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>the cost of planning path</p> <code>path</code> <code>list</code> <p>the planning path</p>"},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/#python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner.getShortestPath","title":"<code>getShortestPath(road_map, dijkstra=True)</code>","text":"<p>Calculate shortest path using graph search algorithm(A*, Dijkstra, etc).</p> <p>Parameters:</p> Name Type Description Default <code>road_map</code> <code>dict</code> <p>road map for voronoi diagram, which store KNN for one voronoi node</p> required <code>dijkstra</code> <code>bool</code> <p>using Dijkstra if true, else A*</p> <code>True</code> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p>"},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/#python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner.isCollision","title":"<code>isCollision(node1, node2)</code>","text":"<p>Judge collision when moving from node1 to node2.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>start node</p> required <code>node2</code> <code>Node</code> <p>end node</p> required <p>Returns:</p> Name Type Description <code>collision</code> <code>bool</code> <p>True if collision exists else False</p>"},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/#python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner.plan","title":"<code>plan()</code>","text":"<p>Voronoi-based motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>voronoi sampled nodes</p>"},{"location":"global_planner/graph_search/voronoi/VoronoiPlanner/#python_motion_planning.global_planner.graph_search.voronoi.VoronoiPlanner.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/sample_search/informed_rrt/Ellipse/","title":"Ellipse","text":""},{"location":"global_planner/sample_search/informed_rrt/Ellipse/#python_motion_planning.global_planner.sample_search.informed_rrt.Ellipse","title":"<code>python_motion_planning.global_planner.sample_search.informed_rrt.Ellipse</code>","text":"<p>Ellipse sampling.</p>"},{"location":"global_planner/sample_search/informed_rrt/InformedRRT/","title":"InformedRRT","text":""},{"location":"global_planner/sample_search/informed_rrt/InformedRRT/#python_motion_planning.global_planner.sample_search.informed_rrt.InformedRRT","title":"<code>python_motion_planning.global_planner.sample_search.informed_rrt.InformedRRT</code>","text":"<p>               Bases: <code>RRTStar</code></p> <p>Class for Informed RRT* motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>max_dist</code> <code>float</code> <p>Maximum expansion distance one step</p> <code>0.5</code> <code>sample_num</code> <code>int</code> <p>Maximum number of sample points</p> <code>1500</code> <code>r</code> <code>float</code> <p>optimization radius</p> <code>12.0</code> <code>goal_sample_rate</code> <code>float</code> <p>heuristic sample</p> <code>0.05</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.InformedRRT((5, 5), (45, 25), pmp.Map(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Optimal Sampling-based Path Planning Focused via Direct Sampling of an Admissible Ellipsoidal heuristic</p>"},{"location":"global_planner/sample_search/informed_rrt/InformedRRT/#python_motion_planning.global_planner.sample_search.informed_rrt.InformedRRT.generateRandomNode","title":"<code>generateRandomNode()</code>","text":"<p>Generate a random node to extend exploring tree.</p> <p>Returns:</p> Name Type Description <code>node</code> <code>Node</code> <p>a random node based on sampling</p>"},{"location":"global_planner/sample_search/informed_rrt/InformedRRT/#python_motion_planning.global_planner.sample_search.informed_rrt.InformedRRT.plan","title":"<code>plan()</code>","text":"<p>Informed-RRT* motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>expanded (sampled) nodes list</p>"},{"location":"global_planner/sample_search/informed_rrt/InformedRRT/#python_motion_planning.global_planner.sample_search.informed_rrt.InformedRRT.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/sample_search/rrt/RRT/","title":"RRT","text":""},{"location":"global_planner/sample_search/rrt/RRT/#python_motion_planning.global_planner.sample_search.rrt.RRT","title":"<code>python_motion_planning.global_planner.sample_search.rrt.RRT</code>","text":"<p>               Bases: <code>SampleSearcher</code></p> <p>Class for RRT motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>max_dist</code> <code>float</code> <p>Maximum expansion distance one step</p> <code>0.5</code> <code>sample_num</code> <code>int</code> <p>Maximum number of sample points</p> <code>10000</code> <code>goal_sample_rate</code> <code>float</code> <p>heuristic sample</p> <code>0.05</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.RRT((5, 5), (45, 25), pmp.Map(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Rapidly-Exploring Random Trees: A New Tool for Path Planning</p>"},{"location":"global_planner/sample_search/rrt/RRT/#python_motion_planning.global_planner.sample_search.rrt.RRT.extractPath","title":"<code>extractPath(closed_list)</code>","text":"<p>Extract the path based on the CLOSED list.</p> <p>Parameters:</p> Name Type Description Default <code>closed_list</code> <code>dict</code> <p>CLOSED list</p> required <p>Returns     cost (float): the cost of planning path     path (list): the planning path</p>"},{"location":"global_planner/sample_search/rrt/RRT/#python_motion_planning.global_planner.sample_search.rrt.RRT.generateRandomNode","title":"<code>generateRandomNode()</code>","text":"<p>Generate a random node to extend exploring tree.</p> <p>Returns:</p> Name Type Description <code>node</code> <code>Node</code> <p>a random node based on sampling</p>"},{"location":"global_planner/sample_search/rrt/RRT/#python_motion_planning.global_planner.sample_search.rrt.RRT.getNearest","title":"<code>getNearest(node_list, node)</code>","text":"<p>Get the node from <code>node_list</code> that is nearest to <code>node</code>.</p> <p>Parameters:</p> Name Type Description Default <code>node_list</code> <code>list</code> <p>exploring list</p> required <code>node</code> <code>Node</code> <p>currently generated node</p> required <p>Returns:</p> Name Type Description <code>node</code> <code>Node</code> <p>nearest node</p>"},{"location":"global_planner/sample_search/rrt/RRT/#python_motion_planning.global_planner.sample_search.rrt.RRT.plan","title":"<code>plan()</code>","text":"<p>RRT motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>expanded (sampled) nodes list</p>"},{"location":"global_planner/sample_search/rrt/RRT/#python_motion_planning.global_planner.sample_search.rrt.RRT.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"global_planner/sample_search/rrt_connect/RRTConnect/","title":"RRTConnect","text":""},{"location":"global_planner/sample_search/rrt_connect/RRTConnect/#python_motion_planning.global_planner.sample_search.rrt_connect.RRTConnect","title":"<code>python_motion_planning.global_planner.sample_search.rrt_connect.RRTConnect</code>","text":"<p>               Bases: <code>RRT</code></p> <p>Class for RRT-Connect motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>max_dist</code> <code>float</code> <p>Maximum expansion distance one step</p> <code>0.5</code> <code>sample_num</code> <code>int</code> <p>Maximum number of sample points</p> <code>10000</code> <code>goal_sample_rate</code> <code>float</code> <p>heuristic sample</p> <code>0.05</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.RRTConnect((5, 5), (45, 25), pmp.Map(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] RRT-Connect: An Efficient Approach to Single-Query Path Planning</p>"},{"location":"global_planner/sample_search/rrt_connect/RRTConnect/#python_motion_planning.global_planner.sample_search.rrt_connect.RRTConnect.extractPath","title":"<code>extractPath(boundary, sample_list_b, sample_list_f)</code>","text":"<p>Extract the path based on the CLOSED set.</p> <p>Parameters:</p> Name Type Description Default <code>boundary</code> <code>Node</code> <p>the boundary node</p> required <code>sample_list_b</code> <code>dict</code> <p>Sample list backward</p> required <code>sample_list_f</code> <code>dict</code> <p>Sample list forward</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>the cost of planning path</p> <code>path</code> <code>list</code> <p>the planning path</p>"},{"location":"global_planner/sample_search/rrt_connect/RRTConnect/#python_motion_planning.global_planner.sample_search.rrt_connect.RRTConnect.getExpand","title":"<code>getExpand(sample_list_b, sample_list_f)</code>","text":"<p>Get the expand list from sample list.</p> <p>Parameters:</p> Name Type Description Default <code>sample_list_b</code> <code>list</code> <p>Sample list backward</p> required <code>sample_list_f</code> <code>list</code> <p>Sample list forward</p> required <p>Returns:</p> Name Type Description <code>expand</code> <code>list</code> <p>expand list</p>"},{"location":"global_planner/sample_search/rrt_connect/RRTConnect/#python_motion_planning.global_planner.sample_search.rrt_connect.RRTConnect.plan","title":"<code>plan()</code>","text":"<p>RRT-Connected motion plan function.</p> <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>path cost</p> <code>path</code> <code>list</code> <p>planning path</p> <code>expand</code> <code>list</code> <p>expanded (sampled) nodes list</p>"},{"location":"global_planner/sample_search/rrt_star/RRTStar/","title":"RRTStar","text":""},{"location":"global_planner/sample_search/rrt_star/RRTStar/#python_motion_planning.global_planner.sample_search.rrt_star.RRTStar","title":"<code>python_motion_planning.global_planner.sample_search.rrt_star.RRTStar</code>","text":"<p>               Bases: <code>RRT</code></p> <p>Class for RRT-Star motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>max_dist</code> <code>float</code> <p>Maximum expansion distance one step</p> <code>0.5</code> <code>sample_num</code> <code>int</code> <p>Maximum number of sample points</p> <code>10000</code> <code>r</code> <code>float</code> <p>optimization radius</p> <code>10.0</code> <code>goal_sample_rate</code> <code>float</code> <p>heuristic sample</p> <code>0.05</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import python_motion_planning as pmp\n&gt;&gt;&gt; planner = pmp.RRTStar((5, 5), (45, 25), pmp.Map(51, 31))\n&gt;&gt;&gt; cost, path, expand = planner.plan()     # planning results only\n&gt;&gt;&gt; planner.plot.animation(path, str(planner), cost, expand)  # animation\n&gt;&gt;&gt; planner.run()       # run both planning and animation\n</code></pre> References <p>[1] Sampling-based algorithms for optimal motion planning</p>"},{"location":"global_planner/sample_search/rrt_star/RRTStar/#python_motion_planning.global_planner.sample_search.rrt_star.RRTStar.getNearest","title":"<code>getNearest(node_list, node)</code>","text":"<p>Get the node from <code>node_list</code> that is nearest to <code>node</code> with optimization.</p> <p>Parameters:</p> Name Type Description Default <code>node_list</code> <code>list</code> <p>exploring list</p> required <code>node</code> <code>Node</code> <p>currently generated node</p> required <p>Returns:</p> Name Type Description <code>node</code> <code>Node</code> <p>nearest node</p>"},{"location":"global_planner/sample_search/sample_search/SampleSearcher/","title":"SampleSearcher","text":""},{"location":"global_planner/sample_search/sample_search/SampleSearcher/#python_motion_planning.global_planner.sample_search.sample_search.SampleSearcher","title":"<code>python_motion_planning.global_planner.sample_search.sample_search.SampleSearcher</code>","text":"<p>               Bases: <code>Planner</code></p> <p>Base class for planner based on sample searching.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required"},{"location":"global_planner/sample_search/sample_search/SampleSearcher/#python_motion_planning.global_planner.sample_search.sample_search.SampleSearcher.isCollision","title":"<code>isCollision(node1, node2)</code>","text":"<p>Judge collision when moving from node1 to node2.</p> <p>Parameters:</p> Name Type Description Default <code>node1</code> <code>Node</code> <p>node 1</p> required <code>node2</code> <code>Node</code> <p>node 2</p> required <p>Returns:</p> Name Type Description <code>collision</code> <code>bool</code> <p>True if collision exists else False</p>"},{"location":"global_planner/sample_search/sample_search/SampleSearcher/#python_motion_planning.global_planner.sample_search.sample_search.SampleSearcher.isInsideObs","title":"<code>isInsideObs(node)</code>","text":"<p>Judge whether a node inside tht obstacles or not.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>node</p> required <p>Returns:</p> Name Type Description <code>inside</code> <code>bool</code> <p>True if inside the obstacles else False</p>"},{"location":"local_planner/apf/APF/","title":"APF","text":""},{"location":"local_planner/apf/APF/#python_motion_planning.local_planner.apf.APF","title":"<code>python_motion_planning.local_planner.apf.APF</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for Artificial Potential Field(APF) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import APF\n&gt;&gt;&gt; start = (5, 5, 0)\n&gt;&gt;&gt; goal = (45, 25, 0)\n&gt;&gt;&gt; env = Grid(51, 31)\n&gt;&gt;&gt; planner = APF(start, goal, env)\n&gt;&gt;&gt; planner.run()\n</code></pre>"},{"location":"local_planner/apf/APF/#python_motion_planning.local_planner.apf.APF.getAttractiveForce","title":"<code>getAttractiveForce(cur_pos, tgt_pos)</code>","text":"<p>Get the attractive force of APF.</p> <p>Parameters:</p> Name Type Description Default <code>cur_pos</code> <code>ndarray</code> <p>current position of robot</p> required <code>tgt_pos</code> <code>ndarray</code> <p>target position of robot</p> required <p>Returns     attr_force (np.ndarray): attractive force</p>"},{"location":"local_planner/apf/APF/#python_motion_planning.local_planner.apf.APF.getRepulsiveForce","title":"<code>getRepulsiveForce()</code>","text":"<p>Get the repulsive force of APF.</p> <p>Returns:</p> Name Type Description <code>rep_force</code> <code>ndarray</code> <p>repulsive force of APF</p>"},{"location":"local_planner/apf/APF/#python_motion_planning.local_planner.apf.APF.plan","title":"<code>plan()</code>","text":"<p>APF motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p>"},{"location":"local_planner/apf/APF/#python_motion_planning.local_planner.apf.APF.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/ddpg/Actor/","title":"Actor","text":""},{"location":"local_planner/ddpg/Actor/#python_motion_planning.local_planner.ddpg.Actor","title":"<code>python_motion_planning.local_planner.ddpg.Actor</code>","text":"<p>               Bases: <code>Module</code></p> <p>Actor network to generate the action.</p> <p>Parameters:</p> Name Type Description Default <code>state_dim</code> <code>int</code> <p>state dimension</p> required <code>action_dim</code> <code>int</code> <p>action dimension</p> required <code>hidden_depth</code> <code>int</code> <p>the number of hidden layers of the neural network</p> required <code>hidden_width</code> <code>int</code> <p>the number of neurons in hidden layers of the neural network</p> required <code>min_state</code> <code>Tensor</code> <p>minimum of each value in the state</p> required <code>max_state</code> <code>Tensor</code> <p>maximum of each value in the state</p> required <code>min_action</code> <code>Tensor</code> <p>minimum of each value in the action</p> required <code>max_action</code> <code>Tensor</code> <p>maximum of each value in the action</p> required"},{"location":"local_planner/ddpg/Actor/#python_motion_planning.local_planner.ddpg.Actor.forward","title":"<code>forward(s)</code>","text":"<p>Generate the action based on the state.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Tensor</code> <p>state</p> required <p>Returns:</p> Name Type Description <code>a</code> <code>Tensor</code> <p>action</p>"},{"location":"local_planner/ddpg/Critic/","title":"Critic","text":""},{"location":"local_planner/ddpg/Critic/#python_motion_planning.local_planner.ddpg.Critic","title":"<code>python_motion_planning.local_planner.ddpg.Critic</code>","text":"<p>               Bases: <code>Module</code></p> <p>Critic network to estimate the value function q(s,a).</p> <p>Parameters:</p> Name Type Description Default <code>state_dim</code> <code>int</code> <p>state dimension</p> required <code>action_dim</code> <code>int</code> <p>action dimension</p> required <code>hidden_depth</code> <code>int</code> <p>the number of hidden layers of the neural network</p> required <code>hidden_width</code> <code>int</code> <p>the number of neurons in hidden layers of the neural network</p> required <code>min_state</code> <code>Tensor</code> <p>minimum of each value in the state</p> required <code>max_state</code> <code>Tensor</code> <p>maximum of each value in the state</p> required <code>min_action</code> <code>Tensor</code> <p>minimum of each value in the action</p> required <code>max_action</code> <code>Tensor</code> <p>maximum of each value in the action</p> required"},{"location":"local_planner/ddpg/Critic/#python_motion_planning.local_planner.ddpg.Critic.forward","title":"<code>forward(s, a)</code>","text":"<p>Calculate the Q-value of (s,a)</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Tensor</code> <p>state</p> required <code>a</code> <code>Tensor</code> <p>action</p> required <p>Returns:</p> Name Type Description <code>q</code> <code>Tensor</code> <p>Q-value of (s,a)</p>"},{"location":"local_planner/ddpg/DDPG/","title":"DDPG","text":""},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG","title":"<code>python_motion_planning.local_planner.ddpg.DDPG</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for Deep Deterministic Policy Gradient (DDPG) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>hidden_depth</code> <code>int</code> <p>the number of hidden layers of the neural network</p> <code>3</code> <code>hidden_width</code> <code>int</code> <p>the number of neurons in hidden layers of the neural network</p> <code>512</code> <code>batch_size</code> <code>int</code> <p>batch size to optimize the neural networks</p> <code>2000</code> <code>buffer_size</code> <code>int</code> <p>maximum replay buffer size</p> <code>1000000.0</code> <code>gamma</code> <code>float</code> <p>discount factor</p> <code>0.999</code> <code>tau</code> <code>float</code> <p>Softly update the target network</p> <code>0.001</code> <code>lr</code> <code>float</code> <p>learning rate</p> <code>0.0001</code> <code>train_noise</code> <code>float</code> <p>Action noise coefficient during training for exploration</p> <code>0.1</code> <code>random_episodes</code> <code>int</code> <p>Take the random actions in the beginning for the better exploration</p> <code>50</code> <code>max_episode_steps</code> <code>int</code> <p>Maximum steps for each episode</p> <code>200</code> <code>update_freq</code> <code>int</code> <p>Frequency (times) of updating the network for each step</p> <code>1</code> <code>update_steps</code> <code>int</code> <p>Update the network for every 'update_steps' steps</p> <code>1</code> <code>evaluate_freq</code> <code>int</code> <p>Frequency (times) of evaluations and calculate the average</p> <code>50</code> <code>evaluate_episodes</code> <code>int</code> <p>Evaluate the network every 'evaluate_episodes' episodes</p> <code>50</code> <code>actor_save_path</code> <code>str</code> <p>Save path of the trained actor network</p> <code>'models/actor_best.pth'</code> <code>critic_save_path</code> <code>str</code> <p>Save path of the trained critic network</p> <code>'models/critic_best.pth'</code> <code>actor_load_path</code> <code>str</code> <p>Load path of the trained actor network</p> <code>None</code> <code>critic_load_path</code> <code>str</code> <p>Load path of the trained critic network</p> <code>None</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG--import-the-necessary-dependencies","title":"Import the necessary dependencies","text":"Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import DDPG\n</code></pre>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG--train-the-model-and-save-the-trained-model","title":"Train the model and save the trained model","text":"<p>Train the model, only for learning-based planners, such as DDPG. It costs a lot of time to train the model, please be patient. If you want a faster training, try reducing num_episodes and batch_size, or increasing update_steps and evaluate_episodes, or fine-tuning other hyperparameters if you are familiar with them, usually in a cost of performance, however.</p> Python Console Session<pre><code>&gt;&gt;&gt; plt = DDPG(start=(5, 5, 0), goal=(45, 25, 0), env=Grid(51, 31),\n&gt;&gt;&gt;    actor_save_path=\"models/actor_best.pth\", critic_save_path=\"models/critic_best.pth\")\n&gt;&gt;&gt; plt.train(num_episodes=10000)\n</code></pre>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG--load-the-trained-model-and-run","title":"load the trained model and run","text":"Python Console Session<pre><code>&gt;&gt;&gt; plt = DDPG(start=(5, 5, 0), goal=(45, 25, 0), env=Grid(51, 31),\n&gt;&gt;&gt;    actor_load_path=\"models/actor_best.pth\", critic_load_path=\"models/critic_best.pth\")\n&gt;&gt;&gt; plt.run()\n</code></pre> References <p>[1] Continuous control with deep reinforcement learning</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.evaluate_policy","title":"<code>evaluate_policy()</code>","text":"<p>Evaluate the policy and calculating the average reward.</p> <p>Returns:</p> Name Type Description <code>evaluate_reward</code> <code>float</code> <p>average reward of the policy</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.optimize_model","title":"<code>optimize_model()</code>","text":"<p>Optimize the neural networks when training.</p> <p>Returns:</p> Name Type Description <code>actor_loss</code> <code>float</code> <p>actor loss</p> <code>critic_loss</code> <code>float</code> <p>critic loss</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.plan","title":"<code>plan()</code>","text":"<p>Deep Deterministic Policy Gradient (DDPG) motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.reset","title":"<code>reset(random_sg=False)</code>","text":"<p>Reset the environment and the robot.</p> <p>Parameters:</p> Name Type Description Default <code>random_sg</code> <code>bool</code> <p>whether to generate random start and goal or not</p> <code>False</code> <p>Returns:</p> Name Type Description <code>state</code> <code>Tensor</code> <p>initial state of the robot</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.reward","title":"<code>reward(state, win, lose)</code>","text":"<p>The state reward function.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>Tensor</code> <p>current state of the robot</p> required <code>win</code> <code>bool</code> <p>whether the episode is won (reached the goal)</p> required <code>lose</code> <code>bool</code> <p>whether the episode is lost (collided)</p> required <p>Returns:</p> Name Type Description <code>reward</code> <code>float</code> <p>reward for the current state</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.select_action","title":"<code>select_action(s)</code>","text":"<p>Select the action from the actor network.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Tensor</code> <p>current state</p> required <p>Returns:</p> Name Type Description <code>a</code> <code>Tensor</code> <p>selected action</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.step","title":"<code>step(state, action)</code>","text":"<p>Take a step in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>Tensor</code> <p>current state of the robot</p> required <code>action</code> <code>Tensor</code> <p>action to take</p> required <p>Returns:</p> Name Type Description <code>next_state</code> <code>Tensor</code> <p>next state of the robot</p> <code>reward</code> <code>float</code> <p>reward for taking the action</p> <code>done</code> <code>bool</code> <p>whether the episode is done</p>"},{"location":"local_planner/ddpg/DDPG/#python_motion_planning.local_planner.ddpg.DDPG.train","title":"<code>train(num_episodes=1000)</code>","text":"<p>Train the model.</p> <p>Parameters:</p> Name Type Description Default <code>num_episodes</code> <code>int</code> <p>number of episodes to train the model</p> <code>1000</code>"},{"location":"local_planner/ddpg/ReplayBuffer/","title":"ReplayBuffer","text":""},{"location":"local_planner/ddpg/ReplayBuffer/#python_motion_planning.local_planner.ddpg.ReplayBuffer","title":"<code>python_motion_planning.local_planner.ddpg.ReplayBuffer</code>","text":"<p>               Bases: <code>object</code></p> <p>Experience replay buffer to store the transitions.</p> <p>Parameters:</p> Name Type Description Default <code>state_dim</code> <code>int</code> <p>state dimension</p> required <code>action_dim</code> <code>int</code> <p>action dimension</p> required <code>max_size</code> <code>int</code> <p>maximum replay buffer size</p> required <code>device</code> <code>device</code> <p>device to store the data</p> required"},{"location":"local_planner/ddpg/ReplayBuffer/#python_motion_planning.local_planner.ddpg.ReplayBuffer.sample","title":"<code>sample(batch_size)</code>","text":"<p>Sample a batch of transitions from the replay buffer.</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>batch size</p> required <p>Returns:</p> Name Type Description <code>batch_s</code> <code>Tensor</code> <p>batch of states</p> <code>batch_a</code> <code>Tensor</code> <p>batch of actions</p> <code>batch_r</code> <code>Tensor</code> <p>batch of rewards</p> <code>batch_s_</code> <code>Tensor</code> <p>batch of next states</p> <code>batch_win</code> <code>Tensor</code> <p>batch of win or otherwise, True: win (reached the goal), False: otherwise.</p>"},{"location":"local_planner/ddpg/ReplayBuffer/#python_motion_planning.local_planner.ddpg.ReplayBuffer.store","title":"<code>store(s, a, r, s_, win)</code>","text":"<p>Store a new transition in the replay buffer.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Tensor</code> <p>state</p> required <code>a</code> <code>Tensor</code> <p>action</p> required <code>r</code> <code>Tensor</code> <p>reward</p> required <code>s_</code> <code>Tensor</code> <p>next state</p> required <code>win</code> <code>bool</code> <p>win or otherwise, True: win (reached the goal), False: otherwise.</p> required"},{"location":"local_planner/dqn/BasicBuffer/","title":"BasicBuffer","text":""},{"location":"local_planner/dqn/BasicBuffer/#python_motion_planning.local_planner.dqn.BasicBuffer","title":"<code>python_motion_planning.local_planner.dqn.BasicBuffer</code>","text":"<p>Basic replay buffer.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>buffer capacity</p> required"},{"location":"local_planner/dqn/BasicBuffer/#python_motion_planning.local_planner.dqn.BasicBuffer.push","title":"<code>push(*experience)</code>","text":"<p>Injecting an experience into the replay buffer.</p> <p>Parameters:</p> Name Type Description Default <code>experience</code> <code>tuple</code> <p>five-element tuple including state, action, reward, next_state and done flag</p> <code>()</code>"},{"location":"local_planner/dqn/BasicBuffer/#python_motion_planning.local_planner.dqn.BasicBuffer.sample","title":"<code>sample(batch_size)</code>","text":"<p>Sampling a batch of data.</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>the size of sampling batch</p> required"},{"location":"local_planner/dqn/BasicBuffer/#python_motion_planning.local_planner.dqn.BasicBuffer.sampleSequence","title":"<code>sampleSequence(batch_size)</code>","text":"<p>Sampling a contiguous batch of data.</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>the size of sampling batch</p> required"},{"location":"local_planner/dqn/DQN/","title":"DQN","text":""},{"location":"local_planner/dqn/DQN/#python_motion_planning.local_planner.dqn.DQN","title":"<code>python_motion_planning.local_planner.dqn.DQN</code>","text":"<p>               Bases: <code>Module</code></p>"},{"location":"local_planner/dqn/DQNPlanner/","title":"DQNPlanner","text":""},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner","title":"<code>python_motion_planning.local_planner.dqn.DQNPlanner</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for Fully Connected Deep Q-Value Network (DQN) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>hidden_depth</code> <code>int</code> <p>the number of hidden layers of the neural network</p> required <code>hidden_width</code> <code>int</code> <p>the number of neurons in hidden layers of the neural network</p> required <code>batch_size</code> <code>int</code> <p>batch size to optimize the neural networks</p> <code>2000</code> <code>buffer_size</code> <code>int</code> <p>maximum replay buffer size</p> <code>1000000.0</code> <code>gamma</code> <code>float</code> <p>discount factor</p> <code>0.999</code> <code>tau</code> <code>float</code> <p>Softly update the target network</p> <code>0.001</code> <code>lr</code> <code>float</code> <p>learning rate</p> <code>0.0001</code> <code>train_noise</code> <code>float</code> <p>Action noise coefficient during training for exploration</p> <code>0.1</code> <code>random_episodes</code> <code>int</code> <p>Take the random actions in the beginning for the better exploration</p> <code>50</code> <code>max_episode_steps</code> <code>int</code> <p>Maximum steps for each episode</p> <code>200</code> <code>update_freq</code> <code>int</code> <p>Frequency (times) of updating the network for each step</p> <code>1</code> <code>update_steps</code> <code>int</code> <p>Update the network for every 'update_steps' steps</p> <code>1</code> <code>evaluate_freq</code> <code>int</code> <p>Frequency (times) of evaluations and calculate the average</p> <code>50</code> <code>evaluate_episodes</code> <code>int</code> <p>Evaluate the network every 'evaluate_episodes' episodes</p> <code>50</code> <code>actor_save_path</code> <code>str</code> <p>Save path of the trained actor network</p> required <code>critic_save_path</code> <code>str</code> <p>Save path of the trained critic network</p> required <code>actor_load_path</code> <code>str</code> <p>Load path of the trained actor network</p> required <code>critic_load_path</code> <code>str</code> <p>Load path of the trained critic network</p> required <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import DDPG\n&gt;&gt;&gt; plt = DDPG(start=(5, 5, 0), goal=(45, 25, 0), env=Grid(51, 31),\n    actor_save_path=\"models/actor_best.pth\", critic_save_path=\"models/critic_best.pth\")\n&gt;&gt;&gt; plt.train(num_episodes=10000)\n</code></pre>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner--load-the-trained-model-and-run","title":"load the trained model and run","text":"Python Console Session<pre><code>&gt;&gt;&gt; plt = DDPG(start=(5, 5, 0), goal=(45, 25, 0), env=Grid(51, 31),\n    actor_load_path=\"models/actor_best.pth\", critic_load_path=\"models/critic_best.pth\")\n&gt;&gt;&gt; plt.run()\n</code></pre>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.buildActionSpace","title":"<code>buildActionSpace()</code>","text":"<p>Action space consists of 25 uniformly sampled actions in permitted range and 25 randomly sampled actions.</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.evaluate_policy","title":"<code>evaluate_policy()</code>","text":"<p>Evaluate the policy and calculating the average reward.</p> <p>Returns:</p> Name Type Description <code>evaluate_reward</code> <code>float</code> <p>average reward of the policy</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.optimize_model","title":"<code>optimize_model()</code>","text":"<p>Optimize the neural networks when training.</p> <p>Returns:</p> Name Type Description <code>actor_loss</code> <code>float</code> <p>actor loss</p> <code>critic_loss</code> <code>float</code> <p>critic loss</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.plan","title":"<code>plan()</code>","text":"<p>Deep Deterministic Policy Gradient (DDPG) motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.reset","title":"<code>reset(random_sg=False)</code>","text":"<p>Reset the environment and the robot.</p> <p>Parameters:</p> Name Type Description Default <code>random_sg</code> <code>bool</code> <p>whether to generate random start and goal or not</p> <code>False</code> <p>Returns:</p> Name Type Description <code>state</code> <code>Tensor</code> <p>initial state of the robot</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.reward","title":"<code>reward(prev_state, state, win, lose)</code>","text":"<p>The state reward function.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>Tensor</code> <p>current state of the robot</p> required <code>win</code> <code>bool</code> <p>whether the episode is won (reached the goal)</p> required <code>lose</code> <code>bool</code> <p>whether the episode is lost (collided)</p> required <p>Returns:</p> Name Type Description <code>reward</code> <code>float</code> <p>reward for the current state</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.step","title":"<code>step(state, action)</code>","text":"<p>Take a step in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>Tensor</code> <p>current state of the robot</p> required <code>action</code> <code>Tensor</code> <p>action to take</p> required <p>Returns:</p> Name Type Description <code>next_state</code> <code>Tensor</code> <p>next state of the robot</p> <code>reward</code> <code>float</code> <p>reward for taking the action</p> <code>done</code> <code>bool</code> <p>whether the episode is done</p>"},{"location":"local_planner/dqn/DQNPlanner/#python_motion_planning.local_planner.dqn.DQNPlanner.train","title":"<code>train(num_episodes=10000)</code>","text":"<p>Train the model.</p> <p>Parameters:</p> Name Type Description Default <code>num_episodes</code> <code>int</code> <p>number of episodes to train the model</p> <code>10000</code>"},{"location":"local_planner/dqn/PrioritizedBuffer/","title":"PrioritizedBuffer","text":""},{"location":"local_planner/dqn/PrioritizedBuffer/#python_motion_planning.local_planner.dqn.PrioritizedBuffer","title":"<code>python_motion_planning.local_planner.dqn.PrioritizedBuffer</code>","text":""},{"location":"local_planner/dqn/PrioritizedBuffer/#python_motion_planning.local_planner.dqn.PrioritizedBuffer.__init__","title":"<code>__init__(max_size, alpha=0.6, beta=0.4)</code>","text":"<p>Priority replay buffer.</p>"},{"location":"local_planner/dqn/PrioritizedBuffer/#python_motion_planning.local_planner.dqn.PrioritizedBuffer.push","title":"<code>push(*experience)</code>","text":"<p>Injecting an experience into the replay buffer.</p> <p>Parameters:</p> Name Type Description Default <code>experience</code> <code>tuple</code> <p>five-element tuple including state, action, reward, next_state and done flag</p> <code>()</code>"},{"location":"local_planner/dqn/PrioritizedBuffer/#python_motion_planning.local_planner.dqn.PrioritizedBuffer.sample","title":"<code>sample(batch_size)</code>","text":"<p>Sampling a batch of data.</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>the size of sampling batch</p> required"},{"location":"local_planner/dqn/PrioritizedBuffer/#python_motion_planning.local_planner.dqn.PrioritizedBuffer.updatePriority","title":"<code>updatePriority(idx, td_error)</code>","text":"<p>Updating priorities based on temporal-difference</p>"},{"location":"local_planner/dqn/SumTree/","title":"SumTree","text":""},{"location":"local_planner/dqn/SumTree/#python_motion_planning.local_planner.dqn.SumTree","title":"<code>python_motion_planning.local_planner.dqn.SumTree</code>","text":"<p>Sum tree structure.</p> <p>Parameters:</p> Name Type Description Default <code>capacity</code> <code>int</code> <p>buffer capacity (must be even)</p> required"},{"location":"local_planner/dqn/SumTree/#python_motion_planning.local_planner.dqn.SumTree.add","title":"<code>add(p, data)</code>","text":"<p>Adding data with priorities to the sum tree.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>int</code> <p>priority</p> required <code>data</code> <code>tuple</code> <p>data</p> required"},{"location":"local_planner/dqn/SumTree/#python_motion_planning.local_planner.dqn.SumTree.get","title":"<code>get(s)</code>","text":"<p>Obtaining leaf node data based on the sampled value.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>int</code> <p>sampling priority</p> required"},{"location":"local_planner/dqn/SumTree/#python_motion_planning.local_planner.dqn.SumTree.total","title":"<code>total()</code>","text":"<p>Returning the root node, i.e., the total priority weight.</p>"},{"location":"local_planner/dqn/SumTree/#python_motion_planning.local_planner.dqn.SumTree.update","title":"<code>update(idx, p)</code>","text":"<p>Update data of the sum tree.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>tree node index</p> required <code>p</code> <code>int</code> <p>priority</p> required"},{"location":"local_planner/dwa/DWA/","title":"DWA","text":""},{"location":"local_planner/dwa/DWA/#python_motion_planning.local_planner.dwa.DWA","title":"<code>python_motion_planning.local_planner.dwa.DWA</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for Dynamic Window Approach(DWA) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>heading_weight</code> <code>float</code> <p>weight for heading cost</p> <code>0.2</code> <code>obstacle_weight</code> <code>float</code> <p>weight for obstacle cost</p> <code>0.1</code> <code>velocity_weight</code> <code>float</code> <p>weight for velocity cost</p> <code>0.05</code> <code>predict_time</code> <code>float</code> <p>predict time for trajectory</p> <code>1.5</code> <code>obstacle_inflation_radius</code> <code>float</code> <p>inflation radius for obstacles</p> <code>1.0</code> <code>v_resolution</code> <code>float</code> <p>velocity resolution in evaulation</p> <code>0.05</code> <code>w_resolution</code> <code>float</code> <p>angular velocity resolution in evaulation</p> <code>0.05</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import DWA\n&gt;&gt;&gt; start = (5, 5, 0)\n&gt;&gt;&gt; goal = (45, 25, 0)\n&gt;&gt;&gt; env = Grid(51, 31)\n&gt;&gt;&gt; planner = DWA(start, goal, env)\n&gt;&gt;&gt; planner.run()\n</code></pre> References <p>[1] The Dynamic Window Approach to Collision Avoidance.</p>"},{"location":"local_planner/dwa/DWA/#python_motion_planning.local_planner.dwa.DWA.calDynamicWin","title":"<code>calDynamicWin()</code>","text":"<p>Calculate dynamic window.</p> <p>Returns:</p> Name Type Description <code>v_reference</code> <code>list</code> <p>reference velocity</p>"},{"location":"local_planner/dwa/DWA/#python_motion_planning.local_planner.dwa.DWA.evaluation","title":"<code>evaluation(vr, goal)</code>","text":"<p>Extract the path based on the CLOSED set.</p> <p>Parameters:</p> Name Type Description Default <code>closed_set</code> <code>list</code> <p>CLOSED set</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <p>Returns:</p> Name Type Description <code>cost</code> <code>float</code> <p>the cost of planning path</p> <code>path</code> <code>list</code> <p>the planning path</p>"},{"location":"local_planner/dwa/DWA/#python_motion_planning.local_planner.dwa.DWA.generateTraj","title":"<code>generateTraj(v, w)</code>","text":"<p>Generate predict trajectory.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>float</code> <p>velocity</p> required <code>w</code> <code>float</code> <p>angular velocity</p> required <p>Returns:</p> Name Type Description <code>v_reference</code> <code>ndarray</code> <p>reference velocity</p>"},{"location":"local_planner/dwa/DWA/#python_motion_planning.local_planner.dwa.DWA.plan","title":"<code>plan()</code>","text":"<p>Dynamic Window Approach(DWA) motion plan function.</p>"},{"location":"local_planner/dwa/DWA/#python_motion_planning.local_planner.dwa.DWA.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/local_planner/LocalPlanner/","title":"LocalPlanner","text":""},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner","title":"<code>python_motion_planning.local_planner.local_planner.LocalPlanner</code>","text":"<p>               Bases: <code>Planner</code></p> <p>Base class for local planner.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>**params</code> <p>other parameters</p> <code>{}</code>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.g_path","title":"<code>g_path</code>  <code>property</code>","text":"<p>[property]Global path.</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.angularRegularization","title":"<code>angularRegularization(w_d)</code>","text":"<p>Angular velocity regularization</p> <p>Parameters:</p> Name Type Description Default <code>w_d</code> <code>float</code> <p>reference angular velocity input</p> required <p>Returns:</p> Name Type Description <code>w</code> <code>float</code> <p>control angular velocity output</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.getLookaheadPoint","title":"<code>getLookaheadPoint()</code>","text":"<p>Find the point on the path that is exactly the lookahead distance away from the robot</p> <p>Returns:</p> Name Type Description <code>lookahead_pt</code> <code>tuple</code> <p>lookahead point</p> <code>theta</code> <code>float</code> <p>the angle on trajectory</p> <code>kappa</code> <code>float</code> <p>the curvature on trajectory</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.isCollision","title":"<code>isCollision(cur_pos)</code>","text":"<p>Whether the robot is in collision with obstacles</p> <p>Parameters:</p> Name Type Description Default <code>cur_pos</code> <code>tuple</code> <p>current position of robot</p> required <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>true if robot is in collision</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.linearRegularization","title":"<code>linearRegularization(v_d)</code>","text":"<p>Linear velocity regularization</p> <p>Parameters:</p> Name Type Description Default <code>v_d</code> <code>float</code> <p>reference velocity input</p> required <p>Returns:</p> Name Type Description <code>v</code> <code>float</code> <p>control velocity output</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.reachGoal","title":"<code>reachGoal(cur, goal)</code>","text":"<p>Whether the robot has reached the goal pose</p> <p>Parameters:</p> Name Type Description Default <code>cur</code> <code>tuple</code> <p>current pose of robot</p> required <code>goal</code> <code>tuple</code> <p>goal pose of robot</p> required <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>true if robot has reached the goal</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.shouldMoveToGoal","title":"<code>shouldMoveToGoal(cur, goal)</code>","text":"<p>Whether to move to the goal pose</p> <p>Parameters:</p> Name Type Description Default <code>cur</code> <code>tuple</code> <p>current pose of robot</p> required <code>goal</code> <code>tuple</code> <p>goal pose of robot</p> required <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>true if robot should perform movement</p>"},{"location":"local_planner/local_planner/LocalPlanner/#python_motion_planning.local_planner.local_planner.LocalPlanner.shouldRotateToPath","title":"<code>shouldRotateToPath(angle_to_path)</code>","text":"<p>Whether to correct the tracking path with rotation operation</p> <p>Parameters:</p> Name Type Description Default <code>angle_to_path</code> <code>float</code> <p>the angle deviation</p> required <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>true if robot should perform rotation</p>"},{"location":"local_planner/lqr/LQR/","title":"LQR","text":""},{"location":"local_planner/lqr/LQR/#python_motion_planning.local_planner.lqr.LQR","title":"<code>python_motion_planning.local_planner.lqr.LQR</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for Linear Quadratic Regulator(LQR) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import LQR\n&gt;&gt;&gt; start = (5, 5, 0)\n&gt;&gt;&gt; goal = (45, 25, 0)\n&gt;&gt;&gt; env = Grid(51, 31)\n&gt;&gt;&gt; planner = LQR(start, goal, env)\n&gt;&gt;&gt; planner.run()\n</code></pre>"},{"location":"local_planner/lqr/LQR/#python_motion_planning.local_planner.lqr.LQR.lqrControl","title":"<code>lqrControl(s, s_d, u_r)</code>","text":"<p>Execute LQR control process.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>tuple</code> <p>current state</p> required <code>s_d</code> <code>tuple</code> <p>desired state</p> required <code>u_r</code> <code>tuple</code> <p>refered control</p> required <p>Returns:</p> Name Type Description <code>u</code> <code>ndarray</code> <p>control vector</p>"},{"location":"local_planner/lqr/LQR/#python_motion_planning.local_planner.lqr.LQR.plan","title":"<code>plan()</code>","text":"<p>LQR motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p>"},{"location":"local_planner/lqr/LQR/#python_motion_planning.local_planner.lqr.LQR.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/mpc/MPC/","title":"MPC","text":""},{"location":"local_planner/mpc/MPC/#python_motion_planning.local_planner.mpc.MPC","title":"<code>python_motion_planning.local_planner.mpc.MPC</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for Model Predicted Control (MPC) motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import MPC\n&gt;&gt;&gt; start = (5, 5, 0)\n&gt;&gt;&gt; goal = (45, 25, 0)\n&gt;&gt;&gt; env = Grid(51, 31)\n&gt;&gt;&gt; planner = MPC(start, goal, env)\n&gt;&gt;&gt; planner.run()\n</code></pre>"},{"location":"local_planner/mpc/MPC/#python_motion_planning.local_planner.mpc.MPC.mpcControl","title":"<code>mpcControl(s, s_d, u_r, u_p)</code>","text":"<p>Execute MPC control process.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>tuple</code> <p>current state</p> required <code>s_d</code> <code>tuple</code> <p>desired state</p> required <code>u_r</code> <code>tuple</code> <p>refered control</p> required <code>u_p</code> <code>tuple</code> <p>previous control error</p> required <p>Returns:</p> Name Type Description <code>u</code> <code>ndarray</code> <p>control vector</p>"},{"location":"local_planner/mpc/MPC/#python_motion_planning.local_planner.mpc.MPC.plan","title":"<code>plan()</code>","text":"<p>MPC motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p>"},{"location":"local_planner/mpc/MPC/#python_motion_planning.local_planner.mpc.MPC.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/pid/PID/","title":"PID","text":""},{"location":"local_planner/pid/PID/#python_motion_planning.local_planner.pid.PID","title":"<code>python_motion_planning.local_planner.pid.PID</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for PID motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import PID\n&gt;&gt;&gt; start = (5, 5, 0)\n&gt;&gt;&gt; goal = (45, 25, 0)\n&gt;&gt;&gt; env = Grid(51, 31)\n&gt;&gt;&gt; planner = PID(start, goal, env)\n&gt;&gt;&gt; planner.run()\n</code></pre>"},{"location":"local_planner/pid/PID/#python_motion_planning.local_planner.pid.PID.angularRegularization","title":"<code>angularRegularization(w_d)</code>","text":"<p>Angular velocity controller with pid.</p> <p>Parameters:</p> Name Type Description Default <code>w_d</code> <code>float</code> <p>reference angular input</p> required <p>Returns:</p> Name Type Description <code>w</code> <code>float</code> <p>control angular velocity output</p>"},{"location":"local_planner/pid/PID/#python_motion_planning.local_planner.pid.PID.linearRegularization","title":"<code>linearRegularization(v_d)</code>","text":"<p>Linear velocity controller with pid.</p> <p>Parameters:</p> Name Type Description Default <code>v_d</code> <code>float</code> <p>reference velocity input</p> required <p>Returns:</p> Name Type Description <code>v</code> <code>float</code> <p>control velocity output</p>"},{"location":"local_planner/pid/PID/#python_motion_planning.local_planner.pid.PID.plan","title":"<code>plan()</code>","text":"<p>PID motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p>"},{"location":"local_planner/pid/PID/#python_motion_planning.local_planner.pid.PID.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"local_planner/rpp/RPP/","title":"RPP","text":""},{"location":"local_planner/rpp/RPP/#python_motion_planning.local_planner.rpp.RPP","title":"<code>python_motion_planning.local_planner.rpp.RPP</code>","text":"<p>               Bases: <code>LocalPlanner</code></p> <p>Class for RPP motion planning.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>start point coordinate</p> required <code>goal</code> <code>tuple</code> <p>goal point coordinate</p> required <code>env</code> <code>Env</code> <p>environment</p> required <code>heuristic_type</code> <code>str</code> <p>heuristic function type</p> <code>'euclidean'</code> <code>**params</code> <p>other parameters can be found in the parent class LocalPlanner</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Grid\n&gt;&gt;&gt; from python_motion_planning.local_planner import RPP\n&gt;&gt;&gt; start = (5, 5, 0)\n&gt;&gt;&gt; goal = (45, 25, 0)\n&gt;&gt;&gt; env = Grid(51, 31)\n&gt;&gt;&gt; planner = RPP(start, goal, env)\n&gt;&gt;&gt; planner.run()\n</code></pre>"},{"location":"local_planner/rpp/RPP/#python_motion_planning.local_planner.rpp.RPP.applyCurvatureConstraint","title":"<code>applyCurvatureConstraint(raw_linear_vel, curvature)</code>","text":"<p>Applying curvature constraints to regularize the speed of robot turning.</p> <p>Parameters:</p> Name Type Description Default <code>raw_linear_vel</code> <code>float</code> <p>the raw linear velocity of robot</p> required <code>curvature</code> <code>float</code> <p>the tracking curvature</p> required <p>Returns:</p> Name Type Description <code>reg_vel</code> <code>float</code> <p>the regulated velocity</p>"},{"location":"local_planner/rpp/RPP/#python_motion_planning.local_planner.rpp.RPP.applyObstacleConstraint","title":"<code>applyObstacleConstraint(raw_linear_vel)</code>","text":"<p>Applying obstacle constraints to regularize the speed of robot approaching obstacles.</p> <p>Parameters:</p> Name Type Description Default <code>raw_linear_vel</code> <code>float</code> <p>the raw linear velocity of robot</p> required <p>Returns:</p> Name Type Description <code>reg_vel</code> <code>float</code> <p>the regulated velocity</p>"},{"location":"local_planner/rpp/RPP/#python_motion_planning.local_planner.rpp.RPP.plan","title":"<code>plan()</code>","text":"<p>RPP motion plan function.</p> <p>Returns:</p> Name Type Description <code>flag</code> <code>bool</code> <p>planning successful if true else failed</p> <code>pose_list</code> <code>list</code> <p>history poses of robot</p> <code>lookahead_pts</code> <code>list</code> <p>history lookahead points</p>"},{"location":"local_planner/rpp/RPP/#python_motion_planning.local_planner.rpp.RPP.run","title":"<code>run()</code>","text":"<p>Running both plannig and animation.</p>"},{"location":"utils/agent/agent/Agent/","title":"Agent","text":""},{"location":"utils/agent/agent/Agent/#python_motion_planning.utils.agent.agent.Agent","title":"<code>python_motion_planning.utils.agent.agent.Agent</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for agent.</p> <p>Parameters:</p> Name Type Description Default <code>px</code> <code>float</code> <p>initial x-position</p> required <code>py</code> <code>float</code> <p>initial y-position</p> required <code>theta</code> <code>float</code> <p>initial pose angle</p> required"},{"location":"utils/agent/agent/Robot/","title":"Robot","text":""},{"location":"utils/agent/agent/Robot/#python_motion_planning.utils.agent.agent.Robot","title":"<code>python_motion_planning.utils.agent.agent.Robot</code>","text":"<p>               Bases: <code>Agent</code></p> <p>Class for robot.</p> <p>Parameters:</p> Name Type Description Default <code>px</code> <code>float</code> <p>initial x-position</p> required <code>py</code> <code>float</code> <p>initial y-position</p> required <code>theta</code> <code>float</code> <p>initial pose angle</p> required <code>v</code> <code>float</code> <p>linear velocity</p> required <code>w</code> <code>float</code> <p>angular velocity</p> required"},{"location":"utils/agent/agent/Robot/#python_motion_planning.utils.agent.agent.Robot.state","title":"<code>state: None</code>  <code>property</code>","text":"<p>Get the state.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>np.ndarray (5x1)</code> <p>robot state with [x, y, theta, v, w]</p>"},{"location":"utils/agent/agent/Robot/#python_motion_planning.utils.agent.agent.Robot.kinematic","title":"<code>kinematic(u, dt, replace=True)</code>","text":"<p>Run robot kinematic once.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>ndarray</code> <p>control command with [v, w]</p> required <code>dt</code> <code>float</code> <p>simulation time</p> required <code>replace</code> <code>bool</code> <p>update-self if true else return a new Robot object</p> <code>True</code> <p>Returns:</p> Name Type Description <code>robot</code> <code>Robot</code> <p>a new robot object</p>"},{"location":"utils/agent/agent/Robot/#python_motion_planning.utils.agent.agent.Robot.lookforward","title":"<code>lookforward(state, u, dt)</code>","text":"<p>Run robot kinematic once but do not update.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>ndarray</code> <p>robot state with [x, y, theta, v, w]</p> required <code>u</code> <code>ndarray</code> <p>control command with [v, w]</p> required <code>dt</code> <code>float</code> <p>simulation time</p> required <code>obstacles</code> <code>set</code> <p>set of obstacles with (x, y)</p> required <p>Returns:</p> Name Type Description <code>new_state</code> <code>np.ndarray (5x1)</code> <p>new robot state with [x, y, theta, v, w]</p>"},{"location":"utils/agent/agent/Robot/#python_motion_planning.utils.agent.agent.Robot.reset","title":"<code>reset()</code>","text":"<p>Reset the state.</p>"},{"location":"utils/environment/env/Env/","title":"Env","text":""},{"location":"utils/environment/env/Env/#python_motion_planning.utils.environment.env.Env","title":"<code>python_motion_planning.utils.environment.env.Env</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Class for building 2-d workspace of robots.</p> <p>Parameters:</p> Name Type Description Default <code>x_range</code> <code>int</code> <p>x-axis range of enviroment</p> required <code>y_range</code> <code>int</code> <p>y-axis range of environmet</p> required <code>eps</code> <code>float</code> <p>tolerance for float comparison</p> <code>1e-06</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning.utils import Env\n&gt;&gt;&gt; env = Env(30, 40)\n</code></pre>"},{"location":"utils/environment/env/Grid/","title":"Grid","text":""},{"location":"utils/environment/env/Grid/#python_motion_planning.utils.environment.env.Grid","title":"<code>python_motion_planning.utils.environment.env.Grid</code>","text":"<p>               Bases: <code>Env</code></p> <p>Class for discrete 2-d grid map.</p>"},{"location":"utils/environment/env/Grid/#python_motion_planning.utils.environment.env.Grid.init","title":"<code>init()</code>","text":"<p>Initialize grid map.</p>"},{"location":"utils/environment/env/Map/","title":"Map","text":""},{"location":"utils/environment/env/Map/#python_motion_planning.utils.environment.env.Map","title":"<code>python_motion_planning.utils.environment.env.Map</code>","text":"<p>               Bases: <code>Env</code></p> <p>Class for continuous 2-d map.</p>"},{"location":"utils/environment/env/Map/#python_motion_planning.utils.environment.env.Map.init","title":"<code>init()</code>","text":"<p>Initialize map.</p>"},{"location":"utils/environment/node/Node/","title":"Node","text":""},{"location":"utils/environment/node/Node/#python_motion_planning.utils.environment.node.Node","title":"<code>python_motion_planning.utils.environment.node.Node</code>","text":"<p>               Bases: <code>object</code></p> <p>Class for searching nodes.</p> <p>Parameters:</p> Name Type Description Default <code>current</code> <code>tuple</code> <p>current coordinate</p> required <code>parent</code> <code>tuple</code> <p>coordinate of parent node</p> <code>None</code> <code>g</code> <code>float</code> <p>path cost</p> <code>0</code> <code>h</code> <code>float</code> <p>heuristic cost</p> <code>0</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from env import Node\n&gt;&gt;&gt; node1 = Node((1, 0), (2, 3), 1, 2)\n&gt;&gt;&gt; node2 = Node((1, 0), (2, 5), 2, 8)\n&gt;&gt;&gt; node3 = Node((2, 0), (1, 6), 3, 1)\n...\n&gt;&gt;&gt; node1 + node2\n&gt;&gt;&gt; Node((2, 0), (2, 3), 3, 2)\n...\n&gt;&gt;&gt; node1 == node2\n&gt;&gt;&gt; True\n...\n&gt;&gt;&gt; node1 != node3\n&gt;&gt;&gt; True\n</code></pre>"},{"location":"utils/environment/point2d/Point2D/","title":"Point2D","text":""},{"location":"utils/environment/point2d/Point2D/#python_motion_planning.utils.environment.point2d.Point2D","title":"<code>python_motion_planning.utils.environment.point2d.Point2D</code>","text":"<p>               Bases: <code>object</code></p> <p>Class for searching and manipulating 2-dimensional points.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x-coordinate of the 2d point</p> required <code>y</code> <code>float</code> <p>y-coordinate of the 2d point</p> required <code>eps</code> <code>float</code> <p>tolerance for float comparison</p> <code>1e-06</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning import Point2D\n&gt;&gt;&gt; p1 = Point2D(1, 2)\n&gt;&gt;&gt; p2 = Point2D(3, 4)\n...\n&gt;&gt;&gt; p1\n&gt;&gt;&gt; Point2D(1, 2)\n...\n&gt;&gt;&gt; p1 + p2\n&gt;&gt;&gt; Point2D(4, 6)\n...\n&gt;&gt;&gt; p1 - p2\n&gt;&gt;&gt; Point2D(-2, -2)\n...\n&gt;&gt;&gt; p1 == p2\n&gt;&gt;&gt; False\n...\n&gt;&gt;&gt; p1!= p2\n&gt;&gt;&gt; True\n...\n&gt;&gt;&gt; p1.dist(p2)\n&gt;&gt;&gt; 2.8284271247461903\n...\n&gt;&gt;&gt; p1.angle(p2)\n&gt;&gt;&gt; 0.7853981633974483\n</code></pre>"},{"location":"utils/environment/pose2d/Pose2D/","title":"Pose2D","text":""},{"location":"utils/environment/pose2d/Pose2D/#python_motion_planning.utils.environment.pose2d.Pose2D","title":"<code>python_motion_planning.utils.environment.pose2d.Pose2D</code>","text":"<p>               Bases: <code>object</code></p> <p>Class for searching and manipulating 2-dimensional poses.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x-coordinate of the 2d pose</p> required <code>y</code> <code>float</code> <p>y-coordinate of the 2d pose</p> required <code>theta</code> <code>float</code> <p>orientation of the 2d pose in radians</p> <code>0</code> <code>eps</code> <code>float</code> <p>tolerance for float comparison</p> <code>1e-06</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from python_motion_planning import Pose2D\n&gt;&gt;&gt; p1 = Pose2D(1, 2)\n&gt;&gt;&gt; p2 = Pose2D(3, 4, 1)\n...\n&gt;&gt;&gt; p1\n&gt;&gt;&gt; Pose2D(1, 2, 0)\n...\n&gt;&gt;&gt; p2\n&gt;&gt;&gt; Pose2D(3, 4, 1)\n...\n&gt;&gt;&gt; p1 + p2\n&gt;&gt;&gt; Pose2D(4, 6, 1)\n...\n&gt;&gt;&gt; p1 - p2\n&gt;&gt;&gt; Pose2D(-2, -2, -1)\n...\n&gt;&gt;&gt; p1 == p2\n&gt;&gt;&gt; False\n...\n&gt;&gt;&gt; p1!= p2\n&gt;&gt;&gt; True\n</code></pre>"},{"location":"utils/helper/math_helper/MathHelper/","title":"MathHelper","text":""},{"location":"utils/helper/math_helper/MathHelper/#python_motion_planning.utils.helper.math_helper.MathHelper","title":"<code>python_motion_planning.utils.helper.math_helper.MathHelper</code>","text":""},{"location":"utils/helper/math_helper/MathHelper/#python_motion_planning.utils.helper.math_helper.MathHelper.closestPointOnLine","title":"<code>closestPointOnLine(a, b, p=(0.0, 0.0))</code>  <code>staticmethod</code>","text":"<p>Find the closest intersection point (foot of a perpendicular) between point p and the line ab.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>tuple</code> <p>point a of the line</p> required <code>b</code> <code>tuple</code> <p>point b of the line</p> required <code>p</code> <code>tuple</code> <p>point p to find the closest intersection point</p> <code>(0.0, 0.0)</code> References <p>[1] method 2 of https://www.youtube.com/watch?v=TPDgB6136ZE</p>"},{"location":"utils/planner/control_factory/ControlFactory/","title":"ControlFactory","text":""},{"location":"utils/planner/control_factory/ControlFactory/#python_motion_planning.utils.planner.control_factory.ControlFactory","title":"<code>python_motion_planning.utils.planner.control_factory.ControlFactory</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"utils/planner/curve_factory/CurveFactory/","title":"CurveFactory","text":""},{"location":"utils/planner/curve_factory/CurveFactory/#python_motion_planning.utils.planner.curve_factory.CurveFactory","title":"<code>python_motion_planning.utils.planner.curve_factory.CurveFactory</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"utils/planner/planner/Planner/","title":"Planner","text":""},{"location":"utils/planner/planner/Planner/#python_motion_planning.utils.planner.planner.Planner","title":"<code>python_motion_planning.utils.planner.planner.Planner</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"utils/planner/planner/Planner/#python_motion_planning.utils.planner.planner.Planner.plan","title":"<code>plan()</code>  <code>abstractmethod</code>","text":"<p>Interface for planning.</p>"},{"location":"utils/planner/planner/Planner/#python_motion_planning.utils.planner.planner.Planner.run","title":"<code>run()</code>  <code>abstractmethod</code>","text":"<p>Interface for running both plannig and animation.</p>"},{"location":"utils/planner/search_factory/SearchFactory/","title":"SearchFactory","text":""},{"location":"utils/planner/search_factory/SearchFactory/#python_motion_planning.utils.planner.search_factory.SearchFactory","title":"<code>python_motion_planning.utils.planner.search_factory.SearchFactory</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"utils/plot/plot/Plot/","title":"Plot","text":""},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot","title":"<code>python_motion_planning.utils.plot.plot.Plot</code>","text":""},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotAgent","title":"<code>plotAgent(pose, radius=1)</code>","text":"<p>Plot agent with specifical pose.</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotAgent--parameters","title":"Parameters","text":"<p>pose: Pose of agent radius: Radius of agent</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotCostCurve","title":"<code>plotCostCurve(cost_list, name)</code>","text":"<p>Plot cost curve with epochs using in evolutionary searching.</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotCostCurve--parameters","title":"Parameters","text":"<p>cost_list: Cost with epochs name: Algorithm name or some other information</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotEnv","title":"<code>plotEnv(name)</code>","text":"<p>Plot environment with static obstacles.</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotEnv--parameters","title":"Parameters","text":"<p>name: Algorithm name or some other information</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotExpand","title":"<code>plotExpand(expand)</code>","text":"<p>Plot expanded grids using in graph searching.</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotExpand--parameters","title":"Parameters","text":"<p>expand: Expanded grids during searching</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotPath","title":"<code>plotPath(path, path_color='#13ae00', path_style='-')</code>","text":"<p>Plot path in global planning.</p>"},{"location":"utils/plot/plot/Plot/#python_motion_planning.utils.plot.plot.Plot.plotPath--parameters","title":"Parameters","text":"<p>path: Path found in global planning</p>"}]}